- name: /Adaptivity
  description: !!str
  type: 
  parameters:
  - name: initial_steps
    required: No
    default: !!str 0
    cpp_type: unsigned int
    group_name: 
    description: |
      The number of adaptive steps to do based on the initial condition.
  - name: marker
    required: No
    default: !!str 
    cpp_type: MarkerName
    group_name: 
    description: |
      The name of the Marker to use to actually adapt the mesh.
  - name: steps
    required: No
    default: !!str 0
    cpp_type: unsigned int
    group_name: 
    description: |
      The number of adaptive steps to use when doing a Steady simulation.
  subblocks:
  - name: /Adaptivity/Indicators
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /Adaptivity/Indicators/*
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: type
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          A string representing the Moose Object that will be built by this Action
      subblocks:
    - name: /Adaptivity/Indicators/AnalyticalIndicator
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str ANY_BLOCK_ID 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          block ID or name where the object works
      - name: function
        required: Yes
        default: !!str 
        cpp_type: FunctionName
        group_name: 
        description: |
          The analytic solution to compare against
      - name: type
        required: No
        default: !!str AnalyticalIndicator
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: variable
        required: Yes
        default: !!str 
        cpp_type: VariableName
        group_name: 
        description: |
          The name of the variable that this Indicator operates on
      subblocks:
    - name: /Adaptivity/Indicators/FluxJumpIndicator
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this Indicator lives.
      - name: property
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          The name of the material property to used as the 'diffusivity'
      - name: scale_by_flux_faces
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: 
        description: |
          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.
      - name: type
        required: No
        default: !!str FluxJumpIndicator
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: variable
        required: Yes
        default: !!str 
        cpp_type: VariableName
        group_name: 
        description: |
          The name of the variable that this side indicator applies to
      subblocks:
    - name: /Adaptivity/Indicators/GradientJumpIndicator
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this Indicator lives.
      - name: scale_by_flux_faces
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: 
        description: |
          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.
      - name: type
        required: No
        default: !!str GradientJumpIndicator
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: variable
        required: Yes
        default: !!str 
        cpp_type: VariableName
        group_name: 
        description: |
          The name of the variable that this side indicator applies to
      subblocks:
    - name: /Adaptivity/Indicators/LaplacianJumpIndicator
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this Indicator lives.
      - name: scale_by_flux_faces
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: 
        description: |
          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.
      - name: type
        required: No
        default: !!str LaplacianJumpIndicator
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: variable
        required: Yes
        default: !!str 
        cpp_type: VariableName
        group_name: 
        description: |
          The name of the variable that this side indicator applies to
      subblocks:
  - name: /Adaptivity/Markers
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /Adaptivity/Markers/*
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: type
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          A string representing the Moose Object that will be built by this Action
      subblocks:
    - name: /Adaptivity/Markers/BoxMarker
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: bottom_left
        required: Yes
        default: !!str 
        cpp_type: libMesh::VectorValue<double>
        group_name: 
        description: |
          The bottom left point (in x,y,z with spaces in-between).
      - name: inside
        required: Yes
        default: !!str 
        cpp_type: MooseEnum
        group_name: 
        options: dont_mark coarsen do_nothing refine
        description: |
          How to mark elements inside the box.
      - name: outside
        required: Yes
        default: !!str 
        cpp_type: MooseEnum
        group_name: 
        options: dont_mark coarsen do_nothing refine
        description: |
          How to mark elements outside the box.
      - name: top_right
        required: Yes
        default: !!str 
        cpp_type: libMesh::VectorValue<double>
        group_name: 
        description: |
          The bottom left point (in x,y,z with spaces in-between).
      - name: type
        required: No
        default: !!str BoxMarker
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Adaptivity/Markers/ComboMarker
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: markers
        required: Yes
        default: !!str 
        cpp_type: std::vector<MarkerName, std::allocator<MarkerName> >
        group_name: 
        description: |
          The Markers to combine.
      - name: type
        required: No
        default: !!str ComboMarker
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Adaptivity/Markers/ErrorFractionMarker
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: coarsen
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!
      - name: indicator
        required: Yes
        default: !!str 
        cpp_type: IndicatorName
        group_name: 
        description: |
          The name of the Indicator that this Marker uses.
      - name: refine
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          Elements within this percentage of the max error will be refined.  Must be between 0 and 1!
      - name: type
        required: No
        default: !!str ErrorFractionMarker
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Adaptivity/Markers/ErrorToleranceMarker
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: coarsen
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          Elements with error less than this will be coarsened.
      - name: indicator
        required: Yes
        default: !!str 
        cpp_type: IndicatorName
        group_name: 
        description: |
          The name of the Indicator that this Marker uses.
      - name: refine
        required: No
        default: !!str 1.79769e+308
        cpp_type: double
        group_name: 
        description: |
          Elements with error more than this will be refined.
      - name: type
        required: No
        default: !!str ErrorToleranceMarker
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Adaptivity/Markers/UniformMarker
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: mark
        required: Yes
        default: !!str 
        cpp_type: MooseEnum
        group_name: 
        options: dont_mark coarsen do_nothing refine
        description: |
          How to mark elements.
      - name: type
        required: No
        default: !!str UniformMarker
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Adaptivity/Markers/ValueThresholdMarker
      description: !!str
      type: 
      parameters:
      - name: block
        required: No
        default: !!str 
        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
        group_name: 
        description: |
          The block id where this object lives.
      - name: coarsen
        required: No
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.
      - name: dont_mark
        required: No
        default: !!str 1
        cpp_type: bool
        group_name: 
        description: |
          If this is true than any element not marked for refinement or coarsening will _not_ be marked for anything.  If it is false then elements not marked for refinement or coarsening will be marked to 'do_nothing'
      - name: invert
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: 
        description: |
          If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.
      - name: refine
        required: No
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.
      - name: type
        required: No
        default: !!str ValueThresholdMarker
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: variable
        required: Yes
        default: !!str 
        cpp_type: VariableName
        group_name: 
        description: |
          The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element
      subblocks:
- name: /AuxBCs
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /AuxBCs/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /AuxBCs/AccumulateAux
    description: !!str
    type: 
    parameters:
    - name: accumulate_from_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Variable whose values are to be accumulated into the current variable
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str AccumulateAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/BoundsAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: bounded_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to be bounded
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: lower
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The lower bound for the variable
    - name: type
      required: No
      default: !!str BoundsAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: upper
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The upper bound for the variable
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/BurnupAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fission_rate
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fission Rate
    - name: molecular_weight
      required: No
      default: !!str 0.27
      cpp_type: double
      group_name: 
      description: |
        The molecular weight
    - name: type
      required: No
      default: !!str BurnupAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/ConstantAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ConstantAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Some constant value that can be read from the input file
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/CoolantAux
    description: !!str
    type: 
    parameters:
    - name: AuxVarOption
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        option for selecting returned aux var: 1 for enthalpy; 2 for coolant temperature
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Axial power profile
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: frac_power_in_coolant
      required: No
      default: !!str 0.03
      cpp_type: double
      group_name: 
      description: |
        fraction of heat deposited in coolant
    - name: heat_flux
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat flux in W/m^2-K 
    - name: inlet_massflux
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet mass flux in kg/m^2-sec
    - name: inlet_pressure
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet pressure in Pa
    - name: inlet_temperature
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet temperature in K 
    - name: linear_heat_rate
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Linear heat generation rate in W/m
    - name: rod_diameter
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Rod diameter in meter
    - name: rod_pitch
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Rod pitch in meter
    - name: temperature
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled variable
    - name: type
      required: No
      default: !!str CoolantAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/CumulativeDamageIndex
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: burnup
      required: No
      default: !!str burnup
      cpp_type: PostprocessorName
      group_name: 
      description: |
        Name of Postprocessor holding the average burnup
    - name: clad_type
      required: No
      default: !!str Zr4
      cpp_type: MooseEnum
      group_name: 
      options: Zr2 Zr4
      description: |
        The cladding type
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: hoop_stress
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled hoop stress
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled temperature
    - name: type
      required: No
      default: !!str CumulativeDamageIndex
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The yield stress of the clad
    subblocks:
  - name: /AuxBCs/DebugResidualAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: debug_variable
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The variable that is being debugged.
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str DebugResidualAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/ElasticEnergyAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ElasticEnergyAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/FastNeutronFluenceAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fast_neutron_flux
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fast Neutron Flux
    - name: type
      required: No
      default: !!str FastNeutronFluenceAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/FastNeutronFluxAux
    description: !!str
    type: 
    parameters:
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: factor
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The fast neutron flux if the function and RALP are not given. A scaling factor if the function is given. A scaling factor if RALP is given.  If RALP is given, it is recommended to use a value of 3e13 (n/(m^2s)/(W/m)).
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fast neutron flux
    - name: rod_ave_lin_pow
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power history function
    - name: type
      required: No
      default: !!str FastNeutronFluxAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/FissionRateAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fission rate.
    - name: type
      required: No
      default: !!str FissionRateAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/FissionRateAuxLWR
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: energy_per_fission
      required: No
      default: !!str 3.28451e-11
      cpp_type: double
      group_name: 
      description: |
        energy per fission in J/fission
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fuel_volume_ratio
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Reduction factor for deviation from right circular cylinder fuel.  The ratio of actual volume to right circular cylinder volume.
    - name: function1
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function.
    - name: function2
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function.
    - name: pellet_diameter
      required: No
      default: !!str 0.0082
      cpp_type: double
      group_name: 
      description: |
        Pellet diameter in m
    - name: pellet_inner_diameter
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Pellet inner diameter in m for an annular pellet
    - name: type
      required: No
      default: !!str FissionRateAuxLWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/FissionRateAxialAux
    description: !!str
    type: 
    parameters:
    - name: axis
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The axis used (0, 1, or 2 for x, y, or z).
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fuel_bottom
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The coordinate at the bottom of the fuel stack
    - name: fuel_bottom_boundary
      required: No
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The bottom boundary of the pellet stack.
    - name: fuel_top
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The coordinate at the top of the fuel stack
    - name: fuel_top_boundary
      required: No
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The top boundary of the pellet stack.
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fission rate.
    - name: type
      required: No
      default: !!str FissionRateAxialAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The average volumetric fission rate
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/FissionRate_AR_LWR
    description: !!str
    type: 
    parameters:
    - name: RPF
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Radial power factor
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: energy_per_fission
      required: No
      default: !!str 3.2e-11
      cpp_type: double
      group_name: 
      description: |
        energy per fission in J/fission
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: f_volume_reduction
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Reduction factor for deviation from right circular cylinder fuel
    - name: function1
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function.
    - name: function2
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function.
    - name: pellet_diameter
      required: No
      default: !!str 0.0082
      cpp_type: double
      group_name: 
      description: |
        Pellet diameter in m
    - name: pellet_inner_diameter
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Pellet inner diameter in m for an annular pellet
    - name: type
      required: No
      default: !!str FissionRate_AR_LWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/FunctionAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function to use as the value
    - name: type
      required: No
      default: !!str FunctionAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/GapValueAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FORTH
      description: |
        The finite element order
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary on the other side of a gap.
    - name: paired_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to get the value of.
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str GapValueAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
  - name: /AuxBCs/LayeredIntegralAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: layered_integral
      required: Yes
      default: !!str 
      cpp_type: UserObjectName
      group_name: 
      description: |
        The LayeredIntegral UserObject to get values from.
    - name: type
      required: No
      default: !!str LayeredIntegralAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/LayeredSideIntegralAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: layered_integral
      required: Yes
      default: !!str 
      cpp_type: UserObjectName
      group_name: 
      description: |
        The LayeredSideIntegral UserObject to get values from.
    - name: type
      required: No
      default: !!str LayeredSideIntegralAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/MaterialRealAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The factor by which to multiply your material property for visualization
    - name: offset
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The offset to add to your material property for visualization
    - name: property
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The scalar material property name
    - name: type
      required: No
      default: !!str MaterialRealAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/MaterialSymmElasticityTensorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The matrix index (0-20) to output
    - name: tensor_matpro
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The SymmElasticityTensor material property name
    - name: type
      required: No
      default: !!str MaterialSymmElasticityTensorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/MaterialTensorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).
    - name: point1
      required: No
      default: !!str (x,y,z)=(       0,        0,        0)
      cpp_type: libMesh::VectorValue<double>
      group_name: 
      description: |
        Point one for defining an axis
    - name: point2
      required: No
      default: !!str (x,y,z)=(       0,        1,        0)
      cpp_type: libMesh::VectorValue<double>
      group_name: 
      description: |
        Point two for defining an axis
    - name: quantity
      required: No
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: VonMises PlasticStrainMag Hydrostatic Hoop FirstInvariant SecondInvariant ThirdInvariant TriAxiality
      description: |
        A scalar quantity to compute: VonMises, PlasticStrainMag, Hydrostatic, Hoop, FirstInvariant, SecondInvariant, ThirdInvariant, TriAxiality
    - name: tensor
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The material tensor name.
    - name: type
      required: No
      default: !!str MaterialTensorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/MaterialVectorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).
    - name: quantity
      required: No
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: length
      description: |
        A scalar quantity to compute: (only option is Length).
    - name: type
      required: No
      default: !!str MaterialVectorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: vector
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The material tensor name.
    subblocks:
  - name: /AuxBCs/NearestNodeDistanceAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to find the distance to.
    - name: type
      required: No
      default: !!str NearestNodeDistanceAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/NearestNodeValueAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to get the value from.
    - name: paired_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to get the value of.
    - name: type
      required: No
      default: !!str NearestNodeValueAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/OxideAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        fast neutron flux (n/m^2-sec)
    - name: temperature
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        cladding wall surface temperature (K) 
    - name: type
      required: No
      default: !!str OxideAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/PenetrationAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: quantity
      required: No
      default: !!str distance
      cpp_type: std::string
      group_name: 
      description: |
        The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, incremental_slip_x, incremental_slip_y, incremental_slip_z
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str PenetrationAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/PlenumTemperatureDistance
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: No
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: type
      required: No
      default: !!str PlenumTemperatureDistance
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/ProcessorIDAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ProcessorIDAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/Radius
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: point1
      required: No
      default: !!str 0 0 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point one for defining an axis
    - name: point2
      required: No
      default: !!str 0 1 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point two for defining an axis
    - name: type
      required: No
      default: !!str Radius
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxBCs/SelfAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str SelfAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
- name: /AuxKernels
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /AuxKernels/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /AuxKernels/AccumulateAux
    description: !!str
    type: 
    parameters:
    - name: accumulate_from_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Variable whose values are to be accumulated into the current variable
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str AccumulateAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/BoundsAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: bounded_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to be bounded
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: lower
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The lower bound for the variable
    - name: type
      required: No
      default: !!str BoundsAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: upper
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The upper bound for the variable
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/BurnupAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fission_rate
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fission Rate
    - name: molecular_weight
      required: No
      default: !!str 0.27
      cpp_type: double
      group_name: 
      description: |
        The molecular weight
    - name: type
      required: No
      default: !!str BurnupAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/ConstantAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ConstantAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Some constant value that can be read from the input file
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/CoolantAux
    description: !!str
    type: 
    parameters:
    - name: AuxVarOption
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        option for selecting returned aux var: 1 for enthalpy; 2 for coolant temperature
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Axial power profile
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: frac_power_in_coolant
      required: No
      default: !!str 0.03
      cpp_type: double
      group_name: 
      description: |
        fraction of heat deposited in coolant
    - name: heat_flux
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat flux in W/m^2-K 
    - name: inlet_massflux
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet mass flux in kg/m^2-sec
    - name: inlet_pressure
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet pressure in Pa
    - name: inlet_temperature
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet temperature in K 
    - name: linear_heat_rate
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Linear heat generation rate in W/m
    - name: rod_diameter
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Rod diameter in meter
    - name: rod_pitch
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Rod pitch in meter
    - name: temperature
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled variable
    - name: type
      required: No
      default: !!str CoolantAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/CumulativeDamageIndex
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: burnup
      required: No
      default: !!str burnup
      cpp_type: PostprocessorName
      group_name: 
      description: |
        Name of Postprocessor holding the average burnup
    - name: clad_type
      required: No
      default: !!str Zr4
      cpp_type: MooseEnum
      group_name: 
      options: Zr2 Zr4
      description: |
        The cladding type
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: hoop_stress
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled hoop stress
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled temperature
    - name: type
      required: No
      default: !!str CumulativeDamageIndex
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The yield stress of the clad
    subblocks:
  - name: /AuxKernels/DebugResidualAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: debug_variable
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The variable that is being debugged.
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str DebugResidualAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/ElasticEnergyAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ElasticEnergyAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/FastNeutronFluenceAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fast_neutron_flux
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fast Neutron Flux
    - name: type
      required: No
      default: !!str FastNeutronFluenceAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/FastNeutronFluxAux
    description: !!str
    type: 
    parameters:
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: factor
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The fast neutron flux if the function and RALP are not given. A scaling factor if the function is given. A scaling factor if RALP is given.  If RALP is given, it is recommended to use a value of 3e13 (n/(m^2s)/(W/m)).
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fast neutron flux
    - name: rod_ave_lin_pow
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power history function
    - name: type
      required: No
      default: !!str FastNeutronFluxAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/FissionRateAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fission rate.
    - name: type
      required: No
      default: !!str FissionRateAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/FissionRateAuxLWR
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: energy_per_fission
      required: No
      default: !!str 3.28451e-11
      cpp_type: double
      group_name: 
      description: |
        energy per fission in J/fission
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fuel_volume_ratio
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Reduction factor for deviation from right circular cylinder fuel.  The ratio of actual volume to right circular cylinder volume.
    - name: function1
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function.
    - name: function2
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function.
    - name: pellet_diameter
      required: No
      default: !!str 0.0082
      cpp_type: double
      group_name: 
      description: |
        Pellet diameter in m
    - name: pellet_inner_diameter
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Pellet inner diameter in m for an annular pellet
    - name: type
      required: No
      default: !!str FissionRateAuxLWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/FissionRateAxialAux
    description: !!str
    type: 
    parameters:
    - name: axis
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The axis used (0, 1, or 2 for x, y, or z).
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fuel_bottom
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The coordinate at the bottom of the fuel stack
    - name: fuel_bottom_boundary
      required: No
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The bottom boundary of the pellet stack.
    - name: fuel_top
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The coordinate at the top of the fuel stack
    - name: fuel_top_boundary
      required: No
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The top boundary of the pellet stack.
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fission rate.
    - name: type
      required: No
      default: !!str FissionRateAxialAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The average volumetric fission rate
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/FissionRate_AR_LWR
    description: !!str
    type: 
    parameters:
    - name: RPF
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Radial power factor
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: energy_per_fission
      required: No
      default: !!str 3.2e-11
      cpp_type: double
      group_name: 
      description: |
        energy per fission in J/fission
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: f_volume_reduction
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Reduction factor for deviation from right circular cylinder fuel
    - name: function1
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function.
    - name: function2
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function.
    - name: pellet_diameter
      required: No
      default: !!str 0.0082
      cpp_type: double
      group_name: 
      description: |
        Pellet diameter in m
    - name: pellet_inner_diameter
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Pellet inner diameter in m for an annular pellet
    - name: type
      required: No
      default: !!str FissionRate_AR_LWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/FunctionAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function to use as the value
    - name: type
      required: No
      default: !!str FunctionAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/GapValueAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FORTH
      description: |
        The finite element order
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary on the other side of a gap.
    - name: paired_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to get the value of.
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str GapValueAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
  - name: /AuxKernels/LayeredIntegralAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: layered_integral
      required: Yes
      default: !!str 
      cpp_type: UserObjectName
      group_name: 
      description: |
        The LayeredIntegral UserObject to get values from.
    - name: type
      required: No
      default: !!str LayeredIntegralAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/LayeredSideIntegralAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: layered_integral
      required: Yes
      default: !!str 
      cpp_type: UserObjectName
      group_name: 
      description: |
        The LayeredSideIntegral UserObject to get values from.
    - name: type
      required: No
      default: !!str LayeredSideIntegralAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/MaterialRealAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The factor by which to multiply your material property for visualization
    - name: offset
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The offset to add to your material property for visualization
    - name: property
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The scalar material property name
    - name: type
      required: No
      default: !!str MaterialRealAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/MaterialSymmElasticityTensorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The matrix index (0-20) to output
    - name: tensor_matpro
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The SymmElasticityTensor material property name
    - name: type
      required: No
      default: !!str MaterialSymmElasticityTensorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/MaterialTensorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).
    - name: point1
      required: No
      default: !!str (x,y,z)=(       0,        0,        0)
      cpp_type: libMesh::VectorValue<double>
      group_name: 
      description: |
        Point one for defining an axis
    - name: point2
      required: No
      default: !!str (x,y,z)=(       0,        1,        0)
      cpp_type: libMesh::VectorValue<double>
      group_name: 
      description: |
        Point two for defining an axis
    - name: quantity
      required: No
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: VonMises PlasticStrainMag Hydrostatic Hoop FirstInvariant SecondInvariant ThirdInvariant TriAxiality
      description: |
        A scalar quantity to compute: VonMises, PlasticStrainMag, Hydrostatic, Hoop, FirstInvariant, SecondInvariant, ThirdInvariant, TriAxiality
    - name: tensor
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The material tensor name.
    - name: type
      required: No
      default: !!str MaterialTensorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/MaterialVectorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).
    - name: quantity
      required: No
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: length
      description: |
        A scalar quantity to compute: (only option is Length).
    - name: type
      required: No
      default: !!str MaterialVectorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: vector
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The material tensor name.
    subblocks:
  - name: /AuxKernels/NearestNodeDistanceAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to find the distance to.
    - name: type
      required: No
      default: !!str NearestNodeDistanceAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/NearestNodeValueAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to get the value from.
    - name: paired_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to get the value of.
    - name: type
      required: No
      default: !!str NearestNodeValueAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/OxideAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        fast neutron flux (n/m^2-sec)
    - name: temperature
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        cladding wall surface temperature (K) 
    - name: type
      required: No
      default: !!str OxideAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/PenetrationAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: quantity
      required: No
      default: !!str distance
      cpp_type: std::string
      group_name: 
      description: |
        The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, incremental_slip_x, incremental_slip_y, incremental_slip_z
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str PenetrationAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/PlenumTemperatureDistance
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: No
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: type
      required: No
      default: !!str PlenumTemperatureDistance
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/ProcessorIDAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ProcessorIDAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/Radius
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: point1
      required: No
      default: !!str 0 0 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point one for defining an axis
    - name: point2
      required: No
      default: !!str 0 1 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point two for defining an axis
    - name: type
      required: No
      default: !!str Radius
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /AuxKernels/SelfAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str SelfAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
- name: /AuxScalarKernels
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /AuxScalarKernels/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
- name: /AuxVariables
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /AuxVariables/*
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The block id where this variable lives
    - name: family
      required: No
      default: !!str LAGRANGE
      cpp_type: MooseEnum
      group_name: 
      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN
      description: |
        Specifies the family of FE shape functions to use for this variable
    - name: initial_condition
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Specifies the initial condition for this variable
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        Specifies the order of the FE shape function to use for this variable
    - name: scaling
      required: No
      default: !!str 1
      cpp_type: double
      group_name: Advanced
      description: |
        Specifies a scaling factor to apply to this variable
    - name: initial_from_file_timestep
      required: No
      default: !!str 2
      cpp_type: int
      group_name: Initial From File
      description: |
        Gives the timestep for which to read a solution from a file for a given variable
    - name: initial_from_file_var
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: Initial From File
      description: |
        Gives the name of a variable for which to read an initial condition from a mesh file
    subblocks:
    - name: /AuxVariables/*/InitialCondition
      description: !!str
      type: 
      parameters:
      - name: type
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          A string representing the Moose Object that will be built by this Action
      subblocks:
      - name: /AuxVariables/*/InitialCondition/<type>
        description: !!str
        type: 
        parameters:
        subblocks:
        - name: /AuxVariables/*/InitialCondition/<type>/BoundingBoxIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: inside
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The value of the variable inside the box
          - name: outside
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The value of the variable outside the box
          - name: type
            required: No
            default: !!str BoundingBoxIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          - name: x1
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The x coordinate of the lower left-hand corner of the box
          - name: x2
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The x coordinate of the upper right-hand corner of the box
          - name: y1
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The y coordinate of the lower left-hand corner of the box
          - name: y2
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The y coordinate of the upper right-hand corner of the box
          - name: z1
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The z coordinate of the lower left-hand corner of the box
          - name: z2
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The z coordinate of the upper right-hand corner of the box
          subblocks:
        - name: /AuxVariables/*/InitialCondition/<type>/ConstantIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: type
            required: No
            default: !!str ConstantIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: value
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          subblocks:
        - name: /AuxVariables/*/InitialCondition/<type>/FunctionIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: function
            required: Yes
            default: !!str 
            cpp_type: FunctionName
            group_name: 
            description: |
              The initial condition function.
          - name: type
            required: No
            default: !!str FunctionIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          subblocks:
        - name: /AuxVariables/*/InitialCondition/<type>/RandomIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: max
            required: No
            default: !!str 1
            cpp_type: double
            group_name: 
            description: |
              Upper bound of the randomly generated values
          - name: min
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              Lower bound of the randomly generated values
          - name: seed
            required: No
            default: !!str 0
            cpp_type: unsigned int
            group_name: 
            description: |
              Seed value for the random number generator
          - name: type
            required: No
            default: !!str RandomIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          subblocks:
        - name: /AuxVariables/*/InitialCondition/<type>/ScalarConstantIC
          description: !!str
          type: 
          parameters:
          - name: type
            required: No
            default: !!str ScalarConstantIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: value
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this initial condition is supposed to provide values for.
          subblocks:
- name: /BCs
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /BCs/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /BCs/BulkCoolantBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: bulk_temperature
      required: No
      default: !!str 800
      cpp_type: double
      group_name: 
      description: |
        Bulk fluid temperature K
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        function describing bulk temperature
    - name: heat_transfer_coefficient
      required: No
      default: !!str 2000
      cpp_type: double
      group_name: 
      description: |
        heat transfer coefficient W/m^2-K
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str BulkCoolantBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/ConvectiveFluxBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: duration
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: final
      required: No
      default: !!str 500
      cpp_type: double
      group_name: 
      description: |
        
    - name: initial
      required: No
      default: !!str 500
      cpp_type: double
      group_name: 
      description: |
        
    - name: rate
      required: No
      default: !!str 7500
      cpp_type: double
      group_name: 
      description: |
        
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str ConvectiveFluxBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/ConvectiveFluxFunction
    description: !!str
    type: 
    parameters:
    - name: T_infinity
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Function describing far-field temperature
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: coefficient
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Heat transfer coefficient
    - name: coefficient_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat transfer coefficient function
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str ConvectiveFluxFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/ConvectiveFluxLWRBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str ConvectiveFluxLWRBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/DGFunctionDiffusionDirichletBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: epsilon
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Epsilon
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The forcing function.
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: sigma
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Sigma
    - name: type
      required: No
      default: !!str DGFunctionDiffusionDirichletBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The value the variable should have on the boundary
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/DashpotBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: coefficient
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The viscosity coefficient
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The displacement component corresponding the variable this BC acts on.
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: disp_x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Displacement in the x direction
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Displacement in the y direction
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Displacement in the z direction
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str DashpotBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/DirichletBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: type
      required: No
      default: !!str DirichletBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Value of the BC
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/FunctionDirichletBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The forcing function.
    - name: type
      required: No
      default: !!str FunctionDirichletBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/FunctionNeumannBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function.
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str FunctionNeumannBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/FunctionPresetBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The forcing function.
    - name: type
      required: No
      default: !!str FunctionPresetBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/GapHeatTransfer
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: gap_distance
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Distance across the gap
    - name: gap_temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Temperature on the other side of the gap
    - name: max_gap
      required: No
      default: !!str 1e+06
      cpp_type: double
      group_name: 
      description: |
        A maximum gap size
    - name: min_gap
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        A minimum gap size
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: No
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: quadrature
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to do Quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp shoul NOT be provided (and will be ignored) however paired_boundary IS then required.
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str GapHeatTransfer
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
  - name: /BCs/GapHeatTransferLWR
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: gap_distance
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Distance across the gap
    - name: gap_temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Temperature on the other side of the gap
    - name: jumpdistance_clad
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The temperature jump distance for the cladding
    - name: jumpdistance_fuel
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The temperature jump distance for the fuel
    - name: max_gap
      required: No
      default: !!str 1e+06
      cpp_type: double
      group_name: 
      description: |
        A maximum gap size
    - name: min_gap
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        A minimum gap size
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: No
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: quadrature
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to do Quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp shoul NOT be provided (and will be ignored) however paired_boundary IS then required.
    - name: roughness_clad
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        The roughness of the cladding surface (m)
    - name: roughness_coef
      required: No
      default: !!str 1.5
      cpp_type: double
      group_name: 
      description: |
        The coefficient for the roughness summation
    - name: roughness_fuel
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        The roughness of the fuel surface (m)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str GapHeatTransferLWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
  - name: /BCs/GapPerfectConductance
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: gap_distance
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Distance across the gap
    - name: gap_temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Temperature on the other side of the gap
    - name: penalty
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Penalty value to be applied to the constraint
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str GapPerfectConductance
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/MatchedValueBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: type
      required: No
      default: !!str MatchedValueBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: v
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/NeumannBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str NeumannBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The value of the gradient on the boundary.
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/Periodic
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /BCs/Periodic/*
      description: !!str
      type: 
      parameters:
      - name: auto_direction
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic
      - name: inv_transform_func
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          Functions that specify the inverse transformation
      - name: primary
        required: No
        default: !!str 
        cpp_type: BoundaryName
        group_name: 
        description: |
          Boundary ID associated with the primary boundary.
      - name: secondary
        required: No
        default: !!str 
        cpp_type: BoundaryName
        group_name: 
        description: |
          Boundary ID associated with the secondary boundary.
      - name: transform_func
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          Functions that specify the transformation
      - name: translation
        required: No
        default: !!str 
        cpp_type: libMesh::VectorValue<double>
        group_name: 
        description: |
          Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.
      - name: variable
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          Variable for the periodic boundary
      subblocks:
  - name: /BCs/PlenumPressure
    description: !!str
    type: 
    parameters:
    - name: R
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The universal gas constant for the units used.
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: component
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The component for the PlenumPressure
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: initial_pressure
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The initial pressure in the plenum.  If not given, a zero initial pressure will be used.
    - name: material_input
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The name of the postprocessor(s) that holds the amount of material injected into the plenum.
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the plenum pressure value.
    - name: output_initial_moles
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the initial moles of gas.
    - name: refab_pressure
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The pressure of fill gas at refabrication.
    - name: refab_temperature
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The temperature at refabrication.
    - name: refab_time
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The time at which the plenum pressure must be reinitialized due to fuel rod refabrication.
    - name: refab_type
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        The type of refabrication.  0 for instantaneous reset of gas, 1 for reset with constant fraction until next refabrication
    - name: refab_volume
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The gas volume at refabrication.
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: startup_time
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The amount of time during which the pressure will ramp from zero to its true value.
    - name: temperature
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the average temperature postprocessor value.
    - name: type
      required: No
      default: !!str PlenumPressure
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    - name: volume
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the internal volume postprocessor value.
    subblocks:
    - name: /BCs/PlenumPressure/*
      description: !!str
      type: 
      parameters:
      - name: R
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The universal gas constant for the units used.
      - name: boundary
        required: Yes
        default: !!str 
        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
        group_name: 
        description: |
          The list of boundary IDs from the mesh where the pressure will be applied
      - name: disp_x
        required: Yes
        default: !!str 
        cpp_type: NonlinearVariableName
        group_name: 
        description: |
          The x displacement
      - name: disp_y
        required: Yes
        default: !!str 
        cpp_type: NonlinearVariableName
        group_name: 
        description: |
          The y displacement
      - name: disp_z
        required: No
        default: !!str 
        cpp_type: NonlinearVariableName
        group_name: 
        description: |
          The z displacement
      - name: initial_pressure
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          The initial pressure in the plenum.  If not given, a zero initial pressure will be used.
      - name: material_input
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          The name of the postprocessor(s) that holds the amount of material injected into the plenum.
      - name: output
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          The reporting postprocessor to use for the plenum pressure value.
      - name: output_initial_moles
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          The reporting postprocessor to use for the initial moles of gas.
      - name: refab_pressure
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          The pressure of fill gas at refabrication.
      - name: refab_temperature
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          The temperature at refabrication.
      - name: refab_time
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          The time at which the plenum pressure must be reinitialized due to fuel rod refabrication.
      - name: refab_type
        required: No
        default: !!str 
        cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
        group_name: 
        description: |
          The type of refabrication.  0 for instantaneous reset of gas, 1 for reset with constant fraction until next refabrication
      - name: refab_volume
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          The gas volume at refabrication.
      - name: save_in_disp_x
        required: No
        default: !!str 
        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
        group_name: 
        description: |
          The save_in variables for x displacement
      - name: save_in_disp_y
        required: No
        default: !!str 
        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
        group_name: 
        description: |
          The save_in variables for y displacement
      - name: save_in_disp_z
        required: No
        default: !!str 
        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
        group_name: 
        description: |
          The save_in variables for z displacement
      - name: startup_time
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          The amount of time during which the pressure will ramp from zero to its true value.
      - name: temperature
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          The name of the average temperature postprocessor value.
      - name: volume
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          The name of the internal volume postprocessor value.
      subblocks:
  - name: /BCs/PresetBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: type
      required: No
      default: !!str PresetBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Value of the BC
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/PresetVelocity
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Function describing the velocity.
    - name: type
      required: No
      default: !!str PresetVelocity
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    - name: velocity
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Value of the velocity.  Used as scale factor if function is given.
    subblocks:
  - name: /BCs/Pressure
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: component
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The component for the Pressure
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The factor to use in computing the pressure
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the pressure
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str Pressure
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
    - name: /BCs/Pressure/*
      description: !!str
      type: 
      parameters:
      - name: boundary
        required: Yes
        default: !!str 
        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
        group_name: 
        description: |
          The list of boundary IDs from the mesh where the pressure will be applied
      - name: disp_x
        required: Yes
        default: !!str 
        cpp_type: NonlinearVariableName
        group_name: 
        description: |
          The x displacement
      - name: disp_y
        required: Yes
        default: !!str 
        cpp_type: NonlinearVariableName
        group_name: 
        description: |
          The y displacement
      - name: disp_z
        required: No
        default: !!str 
        cpp_type: NonlinearVariableName
        group_name: 
        description: |
          The z displacement
      - name: factor
        required: No
        default: !!str 1
        cpp_type: double
        group_name: 
        description: |
          The factor to use in computing the pressure
      - name: function
        required: No
        default: !!str 
        cpp_type: FunctionName
        group_name: 
        description: |
          The function that describes the pressure
      subblocks:
  - name: /BCs/RobinBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str RobinBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The value of the gradient on the boundary.
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/SinDirichletBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: duration
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: final
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: initial
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: type
      required: No
      default: !!str SinDirichletBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/SinNeumannBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: duration
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The duration of the ramp
    - name: final
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The final value of the gradient on the boundary
    - name: initial
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The initial value of the gradient on the boundary
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str SinNeumannBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/StanNeumannBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str StanNeumannBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/VacuumBC
    description: !!str
    type: 
    parameters:
    - name: alpha
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        No idea.
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str VacuumBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /BCs/VectorNeumannBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str VectorNeumannBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    - name: vector_value
      required: No
      default: !!str (x,y,z)=(       0,        0,        0)
      cpp_type: libMesh::VectorValue<double>
      group_name: 
      description: |
        vector this BC should act in
    subblocks:
  - name: /BCs/WeakGradientBC
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this boundary condition applies
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str WeakGradientBC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
- name: /Bounds
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Bounds/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Bounds/AccumulateAux
    description: !!str
    type: 
    parameters:
    - name: accumulate_from_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Variable whose values are to be accumulated into the current variable
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str AccumulateAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/BoundsAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: bounded_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to be bounded
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: lower
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The lower bound for the variable
    - name: type
      required: No
      default: !!str BoundsAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: upper
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The upper bound for the variable
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/BurnupAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fission_rate
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fission Rate
    - name: molecular_weight
      required: No
      default: !!str 0.27
      cpp_type: double
      group_name: 
      description: |
        The molecular weight
    - name: type
      required: No
      default: !!str BurnupAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/ConstantAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ConstantAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Some constant value that can be read from the input file
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/CoolantAux
    description: !!str
    type: 
    parameters:
    - name: AuxVarOption
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        option for selecting returned aux var: 1 for enthalpy; 2 for coolant temperature
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Axial power profile
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: frac_power_in_coolant
      required: No
      default: !!str 0.03
      cpp_type: double
      group_name: 
      description: |
        fraction of heat deposited in coolant
    - name: heat_flux
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat flux in W/m^2-K 
    - name: inlet_massflux
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet mass flux in kg/m^2-sec
    - name: inlet_pressure
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet pressure in Pa
    - name: inlet_temperature
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet temperature in K 
    - name: linear_heat_rate
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Linear heat generation rate in W/m
    - name: rod_diameter
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Rod diameter in meter
    - name: rod_pitch
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Rod pitch in meter
    - name: temperature
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled variable
    - name: type
      required: No
      default: !!str CoolantAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/CumulativeDamageIndex
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: burnup
      required: No
      default: !!str burnup
      cpp_type: PostprocessorName
      group_name: 
      description: |
        Name of Postprocessor holding the average burnup
    - name: clad_type
      required: No
      default: !!str Zr4
      cpp_type: MooseEnum
      group_name: 
      options: Zr2 Zr4
      description: |
        The cladding type
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: hoop_stress
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled hoop stress
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled temperature
    - name: type
      required: No
      default: !!str CumulativeDamageIndex
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The yield stress of the clad
    subblocks:
  - name: /Bounds/DebugResidualAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: debug_variable
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The variable that is being debugged.
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str DebugResidualAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/ElasticEnergyAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ElasticEnergyAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/FastNeutronFluenceAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fast_neutron_flux
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fast Neutron Flux
    - name: type
      required: No
      default: !!str FastNeutronFluenceAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/FastNeutronFluxAux
    description: !!str
    type: 
    parameters:
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: factor
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The fast neutron flux if the function and RALP are not given. A scaling factor if the function is given. A scaling factor if RALP is given.  If RALP is given, it is recommended to use a value of 3e13 (n/(m^2s)/(W/m)).
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fast neutron flux
    - name: rod_ave_lin_pow
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power history function
    - name: type
      required: No
      default: !!str FastNeutronFluxAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/FissionRateAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fission rate.
    - name: type
      required: No
      default: !!str FissionRateAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/FissionRateAuxLWR
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: energy_per_fission
      required: No
      default: !!str 3.28451e-11
      cpp_type: double
      group_name: 
      description: |
        energy per fission in J/fission
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fuel_volume_ratio
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Reduction factor for deviation from right circular cylinder fuel.  The ratio of actual volume to right circular cylinder volume.
    - name: function1
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function.
    - name: function2
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function.
    - name: pellet_diameter
      required: No
      default: !!str 0.0082
      cpp_type: double
      group_name: 
      description: |
        Pellet diameter in m
    - name: pellet_inner_diameter
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Pellet inner diameter in m for an annular pellet
    - name: type
      required: No
      default: !!str FissionRateAuxLWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/FissionRateAxialAux
    description: !!str
    type: 
    parameters:
    - name: axis
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The axis used (0, 1, or 2 for x, y, or z).
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fuel_bottom
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The coordinate at the bottom of the fuel stack
    - name: fuel_bottom_boundary
      required: No
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The bottom boundary of the pellet stack.
    - name: fuel_top
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The coordinate at the top of the fuel stack
    - name: fuel_top_boundary
      required: No
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The top boundary of the pellet stack.
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function that describes the fission rate.
    - name: type
      required: No
      default: !!str FissionRateAxialAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The average volumetric fission rate
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/FissionRate_AR_LWR
    description: !!str
    type: 
    parameters:
    - name: RPF
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Radial power factor
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: energy_per_fission
      required: No
      default: !!str 3.2e-11
      cpp_type: double
      group_name: 
      description: |
        energy per fission in J/fission
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: f_volume_reduction
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Reduction factor for deviation from right circular cylinder fuel
    - name: function1
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function.
    - name: function2
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function.
    - name: pellet_diameter
      required: No
      default: !!str 0.0082
      cpp_type: double
      group_name: 
      description: |
        Pellet diameter in m
    - name: pellet_inner_diameter
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Pellet inner diameter in m for an annular pellet
    - name: type
      required: No
      default: !!str FissionRate_AR_LWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/FunctionAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The function to use as the value
    - name: type
      required: No
      default: !!str FunctionAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/GapValueAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FORTH
      description: |
        The finite element order
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary on the other side of a gap.
    - name: paired_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to get the value of.
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str GapValueAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
  - name: /Bounds/LayeredIntegralAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: layered_integral
      required: Yes
      default: !!str 
      cpp_type: UserObjectName
      group_name: 
      description: |
        The LayeredIntegral UserObject to get values from.
    - name: type
      required: No
      default: !!str LayeredIntegralAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/LayeredSideIntegralAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: layered_integral
      required: Yes
      default: !!str 
      cpp_type: UserObjectName
      group_name: 
      description: |
        The LayeredSideIntegral UserObject to get values from.
    - name: type
      required: No
      default: !!str LayeredSideIntegralAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/MaterialRealAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The factor by which to multiply your material property for visualization
    - name: offset
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The offset to add to your material property for visualization
    - name: property
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The scalar material property name
    - name: type
      required: No
      default: !!str MaterialRealAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/MaterialSymmElasticityTensorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The matrix index (0-20) to output
    - name: tensor_matpro
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The SymmElasticityTensor material property name
    - name: type
      required: No
      default: !!str MaterialSymmElasticityTensorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/MaterialTensorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).
    - name: point1
      required: No
      default: !!str (x,y,z)=(       0,        0,        0)
      cpp_type: libMesh::VectorValue<double>
      group_name: 
      description: |
        Point one for defining an axis
    - name: point2
      required: No
      default: !!str (x,y,z)=(       0,        1,        0)
      cpp_type: libMesh::VectorValue<double>
      group_name: 
      description: |
        Point two for defining an axis
    - name: quantity
      required: No
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: VonMises PlasticStrainMag Hydrostatic Hoop FirstInvariant SecondInvariant ThirdInvariant TriAxiality
      description: |
        A scalar quantity to compute: VonMises, PlasticStrainMag, Hydrostatic, Hoop, FirstInvariant, SecondInvariant, ThirdInvariant, TriAxiality
    - name: tensor
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The material tensor name.
    - name: type
      required: No
      default: !!str MaterialTensorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/MaterialVectorAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: index
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The index into the tensor, from 0 to 5 (xx, yy, zz, xy, yz, zx).
    - name: quantity
      required: No
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: length
      description: |
        A scalar quantity to compute: (only option is Length).
    - name: type
      required: No
      default: !!str MaterialVectorAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    - name: vector
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The material tensor name.
    subblocks:
  - name: /Bounds/NearestNodeDistanceAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to find the distance to.
    - name: type
      required: No
      default: !!str NearestNodeDistanceAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/NearestNodeValueAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to get the value from.
    - name: paired_variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The variable to get the value of.
    - name: type
      required: No
      default: !!str NearestNodeValueAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/OxideAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        fast neutron flux (n/m^2-sec)
    - name: temperature
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        cladding wall surface temperature (K) 
    - name: type
      required: No
      default: !!str OxideAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/PenetrationAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: quantity
      required: No
      default: !!str distance
      cpp_type: std::string
      group_name: 
      description: |
        The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, incremental_slip_x, incremental_slip_y, incremental_slip_z
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str PenetrationAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/PlenumTemperatureDistance
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: No
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: type
      required: No
      default: !!str PlenumTemperatureDistance
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/ProcessorIDAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str ProcessorIDAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/Radius
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: point1
      required: No
      default: !!str 0 0 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point one for defining an axis
    - name: point2
      required: No
      default: !!str 0 1 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point two for defining an axis
    - name: type
      required: No
      default: !!str Radius
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
  - name: /Bounds/SelfAux
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this aux kernel will be applied to
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs from the mesh where this AuxBC applies
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: type
      required: No
      default: !!str SelfAux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: AuxVariableName
      group_name: 
      description: |
        The name of the variable that this object applies to
    subblocks:
- name: /Burnup
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Burnup/*
    description: !!str
    type: 
    parameters:
    - name: N235
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Specifies that the concentration of 235 is required.
    - name: N238
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Specifies that the concentration of 238 is required.
    - name: N239
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Specifies that the concentration of 239 is required.
    - name: N240
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Specifies that the concentration of 240 is required.
    - name: N241
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Specifies that the concentration of 241 is required.
    - name: N242
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Specifies that the concentration of 242 is required.
    - name: RPF
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Specifies that the radial power factor is required.
    - name: block
      required: Yes
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The blocks where radial power factor should be computed.
    - name: energy_per_fission
      required: No
      default: !!str 3.28451e-11
      cpp_type: double
      group_name: 
      description: |
        Energy released per fission (J/fission)
    - name: family
      required: No
      default: !!str LAGRANGE
      cpp_type: std::string
      group_name: 
      description: |
        Specifies the family of FE shape functions to use for this variable
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: std::string
      group_name: 
      description: |
        Specifies the order of the FE shape function to use for this variable
    - name: a_lower
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The lower axial coordinate.
    - name: a_upper
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The upper axial coordinate.
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The axial power profile function
    - name: bias
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Bias for radial point spacing.  Must be between 0.5 and 2.0
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The density.
    - name: fuel_inner_radius
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The inner radius.
    - name: fuel_outer_radius
      required: No
      default: !!str 0.0041
      cpp_type: double
      group_name: 
      description: |
        The outer radius.
    - name: fuel_volume_ratio
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Reduction factor for deviation from right circular cylinder fuel.  The ratio of actual volume to right circular cylinder volume.
    - name: i_enrich
      required: No
      default: !!str 0.05 0.95 0 0 0 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The initial enrichment for the six isotopes.
    - name: num_axial
      required: No
      default: !!str 20
      cpp_type: unsigned int
      group_name: 
      description: |
        Number of axial grid points.
    - name: num_radial
      required: No
      default: !!str 80
      cpp_type: unsigned int
      group_name: 
      description: |
        Number of radial grid points.
    - name: rod_ave_lin_pow
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function
    - name: rpf_active
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Flag for turning radial power factor on.
    - name: sigma_a_thermal
      required: No
      default: !!str 51.2 0.78 163.6 100.584 170 80.458 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The absoprtion (thermal) cross sections for the six isotopes.
    - name: sigma_c
      required: No
      default: !!str 9.7 0.78 58.6 100 50 80 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The capture cross sections for the six isotopes.
    - name: sigma_f
      required: No
      default: !!str 41.5 0 105 0.584 120 0.458 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The fission cross sections for the six isotopes.
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Default/scaling value.
    subblocks:
- name: /Constraints
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Constraints/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Constraints/MultiDContactConstraint
    description: !!str
    type: 
    parameters:
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|timestep|timestep_begin|custom) to execute only at that moment
    - name: jacobian_update
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to update the 'in contact' list every jacobian evaluation (by default it will happen once per timestep
    - name: master
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary ID associated with the master side
    - name: model
      required: No
      default: !!str frictionless
      cpp_type: std::string
      group_name: 
      description: |
        The contact model to use
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FORTH
      description: |
        The finite element order used for projections
    - name: penalty
      required: No
      default: !!str 1e+08
      cpp_type: double
      group_name: 
      description: |
        The penalty to apply.  This can vary depending on the stiffness of your materials
    - name: slave
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary ID associated with the slave side
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str MultiDContactConstraint
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this constraint is applied to.
    subblocks:
  - name: /Constraints/OneDContactConstraint
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|timestep|timestep_begin|custom) to execute only at that moment
    - name: jacobian_update
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to update the 'in contact' list every jacobian evaluation (by default it will happen once per timestep
    - name: master
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary ID associated with the master side
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FORTH
      description: |
        The finite element order used for projections
    - name: slave
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary ID associated with the slave side
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str OneDContactConstraint
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this constraint is applied to.
    subblocks:
  - name: /Constraints/TiedValueConstraint
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|timestep|timestep_begin|custom) to execute only at that moment
    - name: master
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary ID associated with the master side
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FORTH
      description: |
        The finite element order used for projections
    - name: slave
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary ID associated with the slave side
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str TiedValueConstraint
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this constraint is applied to.
    subblocks:
- name: /Contact
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Contact/*
    description: !!str
    type: 
    parameters:
    - name: disp_x
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str DEFAULT
      cpp_type: MooseEnum
      group_name: 
      options: DEFAULT PENALTY AUGMENTED_LAGRANGE
      description: |
        The contact formulation: default, penalty, augmented_lagrange
    - name: friction_coefficient
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The friction coefficient
    - name: master
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The master surface
    - name: model
      required: No
      default: !!str frictionless
      cpp_type: std::string
      group_name: 
      description: |
        The contact model to use
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order: FIRST, SECOND, etc.
    - name: penalty
      required: No
      default: !!str 1e+08
      cpp_type: double
      group_name: 
      description: |
        The penalty to apply.  This can vary depending on the stiffness of your materials
    - name: slave
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The slave surface
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: tension_release
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  Must be positive.
    subblocks:
- name: /CoolantChannel
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /CoolantChannel/*
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The boundary where the coolant channel calculation will run
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable representing temperature
    - name: axial_length
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        axial length of fuel rod
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Axial power profile
    - name: chf_correlation_type
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        CHF correlation
    - name: coupledEnthalpy
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        coupled coolant enthalpy
    - name: frac_power_in_coolant
      required: No
      default: !!str 0.03
      cpp_type: double
      group_name: 
      description: |
        fraction of heat deposited in coolant
    - name: heat_flux
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat flux in W/m^2-K 
    - name: heat_input
      required: No
      default: !!str heat_input_z1 heat_input_z2 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        Name of postprocessor holding heat input
    - name: heat_input_z1
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name of postprocessor holding heat input
    - name: heat_input_z2
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name of postprocessor holding heat input
    - name: heat_transfer_coefficient
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat transfer coefficient in W/m^2-K
    - name: heat_transfer_mode
      required: No
      default: !!str 0
      cpp_type: int
      group_name: 
      description: |
        heat transfer mode determined by internal calculation
    - name: htc_correlation_type
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        heat transfer correlation type 
    - name: inlet_massflux
      required: No
      default: !!str 3600
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet mass flux in kg/m^2-sec
    - name: inlet_pressure
      required: No
      default: !!str 15.5E6
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet pressure in Pa
    - name: inlet_temperature
      required: No
      default: !!str 300
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet temperature in K 
    - name: linear_heat_rate
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Linear heat generation rate in W/m
    - name: number_axial_zone
      required: No
      default: !!str 0
      cpp_type: int
      group_name: 
      description: |
        Number of heat flux integral  postprocessors
    - name: rod_diameter
      required: No
      default: !!str 0.01
      cpp_type: double
      group_name: 
      description: |
        Rod diameter in meter
    - name: rod_pitch
      required: No
      default: !!str 0.0126
      cpp_type: double
      group_name: 
      description: |
        Rod pitch in meter
    subblocks:
- name: /CoupledProblems
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /CoupledProblems/*
    description: !!str
    type: 
    parameters:
    - name: input_file
      required: Yes
      default: !!str 
      cpp_type: FileName
      group_name: 
      description: |
        File name of the input file
    subblocks:
    - name: /CoupledProblems/*/*
      description: !!str
      type: 
      parameters:
      - name: from
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          The name of the problem we are getting the variable from
      - name: var_name
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          The name of the variable we are getting from the problem
      subblocks:
- name: /DGKernels
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /DGKernels/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /DGKernels/DGDiffusion
    description: !!str
    type: 
    parameters:
    - name: epsilon
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        epsilon
    - name: sigma
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        sigma
    - name: type
      required: No
      default: !!str DGDiffusion
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
- name: /Dampers
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Dampers/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Dampers/ConstantDamper
    description: !!str
    type: 
    parameters:
    - name: damping
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The percentage (between 0 and 1) of the newton update to take.
    - name: type
      required: No
      default: !!str ConstantDamper
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this damper operates on
    subblocks:
  - name: /Dampers/MaxIncrement
    description: !!str
    type: 
    parameters:
    - name: max_increment
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The maximum newton increment for the variable.
    - name: type
      required: No
      default: !!str MaxIncrement
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this damper operates on
    subblocks:
- name: /Debug
  description: !!str
  type: 
  parameters:
  - name: show_actions
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: 
    description: |
      Print out the actions being executed
  - name: show_top_residuals
    required: No
    default: !!str 0
    cpp_type: unsigned int
    group_name: 
    description: |
      The number of top residuals to print out (0 = no output)
  - name: show_var_residual
    required: No
    default: !!str 
    cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >
    group_name: 
    description: |
      Variables we will display the residual for
  subblocks:
- name: /DeprecatedBlock
  description: !!str
  type: 
  parameters:
  - name: DEPRECATED
    required: No
    default: !!str 
    cpp_type: bool
    group_name: 
    description: |
      *** WARNING: This block is deprecated - DO NOT USE ***
  subblocks:
- name: /DiracKernels
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /DiracKernels/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /DiracKernels/ConstantPointSource
    description: !!str
    type: 
    parameters:
    - name: point
      required: Yes
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The x,y,z coordinates of the point
    - name: type
      required: No
      default: !!str ConstantPointSource
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The value of the point source
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /DiracKernels/ContactMaster
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The master boundary
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str default
      cpp_type: std::string
      group_name: 
      description: |
        The contact formulation
    - name: friction_coefficient
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The friction coefficient
    - name: model
      required: No
      default: !!str frictionless
      cpp_type: std::string
      group_name: 
      description: |
        The contact model to use
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: penalty
      required: No
      default: !!str 1e+08
      cpp_type: double
      group_name: 
      description: |
        The penalty to apply.  This can vary depending on the stiffness of your materials
    - name: slave
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The slave boundary
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: tension_release
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Tension release threshold.  A node in contact will not be released if its tensile load is below this value.  Must be positive.
    - name: type
      required: No
      default: !!str ContactMaster
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /DiracKernels/GapHeatPointSourceMaster
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The master boundary
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: slave
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The slave boundary
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str GapHeatPointSourceMaster
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /DiracKernels/SlaveConstraint
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The slave boundary
    - name: component
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)
    - name: disp_x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str default
      cpp_type: std::string
      group_name: 
      description: |
        The contact formulation
    - name: friction_coefficient
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The friction coefficient
    - name: master
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The master boundary
    - name: model
      required: No
      default: !!str frictionless
      cpp_type: std::string
      group_name: 
      description: |
        The contact model to use
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: penalty
      required: No
      default: !!str 1e+08
      cpp_type: double
      group_name: 
      description: |
        The penalty to apply.  This can vary depending on the stiffness of your materials
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: No
      default: !!str SlaveConstraint
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
- name: /Executioner
  description: !!str
  type: 
  parameters:
  - name: l_abs_step_tol
    required: No
    default: !!str -1
    cpp_type: double
    group_name: Solver
    description: |
      Linear Absolute Step Tolerance
  - name: l_max_its
    required: No
    default: !!str 10000
    cpp_type: unsigned int
    group_name: Solver
    description: |
      Max Linear Iterations
  - name: l_tol
    required: No
    default: !!str 1e-05
    cpp_type: double
    group_name: Solver
    description: |
      Linear Tolerance
  - name: nl_abs_step_tol
    required: No
    default: !!str 1e-50
    cpp_type: double
    group_name: Solver
    description: |
      Nonlinear Absolute step Tolerance
  - name: nl_abs_tol
    required: No
    default: !!str 1e-50
    cpp_type: double
    group_name: Solver
    description: |
      Nonlinear Absolute Tolerance
  - name: nl_max_funcs
    required: No
    default: !!str 10000
    cpp_type: unsigned int
    group_name: Solver
    description: |
      Max Nonlinear solver function evaluations
  - name: nl_max_its
    required: No
    default: !!str 50
    cpp_type: unsigned int
    group_name: Solver
    description: |
      Max Nonlinear Iterations
  - name: nl_rel_step_tol
    required: No
    default: !!str 1e-50
    cpp_type: double
    group_name: Solver
    description: |
      Nonlinear Relative step Tolerance
  - name: nl_rel_tol
    required: No
    default: !!str 1e-08
    cpp_type: double
    group_name: Solver
    description: |
      Nonlinear Relative Tolerance
  - name: no_fe_reinit
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Advanced
    description: |
      Specifies whether or not to reinitialize FEs
  - name: petsc_options
    required: No
    default: !!str 
    cpp_type: std::vector<std::string, std::allocator<std::string> >
    group_name: 
    description: |
      Singleton Petsc options
  - name: petsc_options_iname
    required: No
    default: !!str 
    cpp_type: std::vector<std::string, std::allocator<std::string> >
    group_name: 
    description: |
      Names of Petsc name/value pairs
  - name: petsc_options_value
    required: No
    default: !!str 
    cpp_type: std::vector<std::string, std::allocator<std::string> >
    group_name: 
    description: |
      Values of Petsc name/value pairs (must correspond with "petsc_options_iname"
  - name: scheme
    required: No
    default: !!str backward-euler
    cpp_type: MooseEnum
    group_name: 
    options: backward-euler implicit-euler explicit-euler crank-nicolson bdf2 petsc
    description: |
      Time integration scheme used.
  - name: type
    required: Yes
    default: !!str 
    cpp_type: std::string
    group_name: 
    description: |
      A string representing the Moose Object that will be built by this Action
  subblocks:
  - name: /Executioner/<type>
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /Executioner/<type>/AdaptiveErrorEstimateTransient
      description: !!str
      type: 
      parameters:
      - name: abort_on_solve_fail
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          abort if solve not converged rather than cut timestep
      - name: dt
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The timestep size between solves
      - name: dtmax
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: Advanced
        description: |
          The maximum timestep size in an adaptive run
      - name: dtmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The minimum timestep size in an adaptive run
      - name: e_max
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          Maximum acceptable error.
      - name: e_tol
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          Target error tolerance.
      - name: end_time
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: 
        description: |
          The end time of the simulation
      - name: growth_factor
        required: No
        default: !!str 2
        cpp_type: double
        group_name: Advanced
        description: |
          Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.  For use with 'time_t' and 'time_dt'.
      - name: max_increase
        required: No
        default: !!str 1e+09
        cpp_type: double
        group_name: 
        description: |
          Maximum ratio that the time step can increase.
      - name: n_startup_steps
        required: No
        default: !!str 0
        cpp_type: int
        group_name: Advanced
        description: |
          The number of timesteps during startup
      - name: num_steps
        required: No
        default: !!str 1.79769e+308
        cpp_type: double
        group_name: 
        description: |
          The number of timesteps in a transient run
      - name: predictor_scale
        required: No
        default: !!str 
        cpp_type: double
        group_name: Advanced
        description: |
          The scale factor for the predictor (can range from 0 to 1)
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: scaling_parameter
        required: No
        default: !!str 0.8
        cpp_type: double
        group_name: 
        description: |
          scaling parameter for dt selection
      - name: ss_check_tol
        required: No
        default: !!str 1e-08
        cpp_type: double
        group_name: Advanced
        description: |
          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.
      - name: ss_tmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          Minimum number of timesteps to take before checking for steady state conditions.
      - name: start_adapting
        required: No
        default: !!str 2
        cpp_type: int
        group_name: 
        description: |
          when to start taking adaptive time steps
      - name: start_time
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The start time of the simulation
      - name: steps_between_increase
        required: No
        default: !!str 1
        cpp_type: int
        group_name: 
        description: |
          the number of time steps before recalculating dt
      - name: sync_times
        required: No
        default: !!str -1.79769e+308 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          A list of times that will be solved for provided they are within the simulation time
      - name: time_dt
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of dt
      - name: time_period_ends
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The end times of time periods
      - name: time_period_starts
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The start times of time periods
      - name: time_periods
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: Time Periods
        description: |
          The names of periods
      - name: time_t
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of t
      - name: trans_ss_check
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether or not to check for steady state conditions
      - name: type
        required: No
        default: !!str AdaptiveErrorEstimateTransient
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: use_AB2
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether to use the Adams-Bashforth 2 predictor
      - name: use_littlef
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          if a function evaluation should be used or time deriv's in predictors
      subblocks:
    - name: /Executioner/<type>/AdaptiveTransient
      description: !!str
      type: 
      parameters:
      - name: cutback_factor
        required: No
        default: !!str 0.5
        cpp_type: double
        group_name: 
        description: |
          Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed.
      - name: dt
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The timestep size between solves
      - name: dtmax
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: 
        description: |
          The maximum timestep size in an adaptive run
      - name: dtmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          The minimum timestep size in an adaptive run
      - name: end_time
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: 
        description: |
          The end time of the simulation
      - name: growth_factor
        required: No
        default: !!str 2
        cpp_type: double
        group_name: 
        description: |
          Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve
      - name: iteration_window
        required: No
        default: !!str 
        cpp_type: int
        group_name: 
        description: |
          The size of the nonlinear iteration window for adaptive timestepping (default = 0.2*optimal_iterations)
      - name: linear_iteration_ratio
        required: No
        default: !!str 
        cpp_type: int
        group_name: 
        description: |
          The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)
      - name: max_function_change
        required: No
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The absolute value of the maximum change in timestep_limiting_function over a timestep
      - name: n_startup_steps
        required: No
        default: !!str 0
        cpp_type: int
        group_name: 
        description: |
          The number of timesteps during startup
      - name: num_steps
        required: No
        default: !!str 1.79769e+308
        cpp_type: double
        group_name: 
        description: |
          The number of timesteps in a transient run
      - name: optimal_iterations
        required: No
        default: !!str 
        cpp_type: int
        group_name: 
        description: |
          The target number of nonlinear iterations for adaptive timestepping
      - name: predictor_scale
        required: No
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The scale factor for the predictor (can range from 0 to 1)
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: ss_check_tol
        required: No
        default: !!str 1e-08
        cpp_type: double
        group_name: 
        description: |
          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.
      - name: ss_tmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          Minimum number of timesteps to take before checking for steady state conditions.
      - name: start_time
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          The start time of the simulation
      - name: sync_times
        required: No
        default: !!str -1.79769e+308 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          A list of times that will be solved for provided they are within the simulation time
      - name: time_dt
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          The values of dt
      - name: time_t
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          The values of t
      - name: timestep_limiting_function
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          A function used to control the timestep by limiting the change in the function over a timestep
      - name: trans_ss_check
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: 
        description: |
          Whether or not to check for steady state conditions
      - name: type
        required: No
        default: !!str AdaptiveTransient
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Executioner/<type>/CoupledTransientExecutioner
      description: !!str
      type: 
      parameters:
      - name: num_steps
        required: No
        default: !!str 4294967295
        cpp_type: unsigned int
        group_name: 
        description: |
          The number of timesteps in a transient run
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: type
        required: No
        default: !!str CoupledTransientExecutioner
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Executioner/<type>/DT2Transient
      description: !!str
      type: 
      parameters:
      - name: abort_on_solve_fail
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          abort if solve not converged rather than cut timestep
      - name: dt
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The timestep size between solves
      - name: dtmax
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: Advanced
        description: |
          The maximum timestep size in an adaptive run
      - name: dtmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The minimum timestep size in an adaptive run
      - name: e_max
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          Maximum acceptable error.
      - name: e_tol
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          Target error tolerance.
      - name: end_time
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: 
        description: |
          The end time of the simulation
      - name: growth_factor
        required: No
        default: !!str 2
        cpp_type: double
        group_name: Advanced
        description: |
          Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.  For use with 'time_t' and 'time_dt'.
      - name: max_increase
        required: No
        default: !!str 1e+09
        cpp_type: double
        group_name: 
        description: |
          Maximum ratio that the time step can increase.
      - name: n_startup_steps
        required: No
        default: !!str 0
        cpp_type: int
        group_name: Advanced
        description: |
          The number of timesteps during startup
      - name: num_steps
        required: No
        default: !!str 1.79769e+308
        cpp_type: double
        group_name: 
        description: |
          The number of timesteps in a transient run
      - name: predictor_scale
        required: No
        default: !!str 
        cpp_type: double
        group_name: Advanced
        description: |
          The scale factor for the predictor (can range from 0 to 1)
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: ss_check_tol
        required: No
        default: !!str 1e-08
        cpp_type: double
        group_name: Advanced
        description: |
          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.
      - name: ss_tmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          Minimum number of timesteps to take before checking for steady state conditions.
      - name: start_time
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The start time of the simulation
      - name: sync_times
        required: No
        default: !!str -1.79769e+308 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          A list of times that will be solved for provided they are within the simulation time
      - name: time_dt
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of dt
      - name: time_period_ends
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The end times of time periods
      - name: time_period_starts
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The start times of time periods
      - name: time_periods
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: Time Periods
        description: |
          The names of periods
      - name: time_t
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of t
      - name: trans_ss_check
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether or not to check for steady state conditions
      - name: type
        required: No
        default: !!str DT2Transient
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: use_AB2
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether to use the Adams-Bashforth 2 predictor
      - name: use_littlef
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          if a function evaluation should be used or time deriv's in predictors
      subblocks:
    - name: /Executioner/<type>/LooseCouplingExecutioner
      description: !!str
      type: 
      parameters:
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: type
        required: No
        default: !!str LooseCouplingExecutioner
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Executioner/<type>/SolutionTimeAdaptive
      description: !!str
      type: 
      parameters:
      - name: abort_on_solve_fail
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          abort if solve not converged rather than cut timestep
      - name: adapt_log
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: 
        description: |
          Output adaptive time step log
      - name: dt
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The timestep size between solves
      - name: dtmax
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: Advanced
        description: |
          The maximum timestep size in an adaptive run
      - name: dtmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The minimum timestep size in an adaptive run
      - name: end_time
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: 
        description: |
          The end time of the simulation
      - name: growth_factor
        required: No
        default: !!str 2
        cpp_type: double
        group_name: Advanced
        description: |
          Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.  For use with 'time_t' and 'time_dt'.
      - name: initial_direction
        required: No
        default: !!str 1
        cpp_type: int
        group_name: 
        description: |
          Direction for the first step.  1 for up... -1 for down. 
      - name: n_startup_steps
        required: No
        default: !!str 0
        cpp_type: int
        group_name: Advanced
        description: |
          The number of timesteps during startup
      - name: num_steps
        required: No
        default: !!str 1.79769e+308
        cpp_type: double
        group_name: 
        description: |
          The number of timesteps in a transient run
      - name: percent_change
        required: No
        default: !!str 0.1
        cpp_type: double
        group_name: 
        description: |
          Percentage to change the timestep by.  Should be between 0 and 1
      - name: predictor_scale
        required: No
        default: !!str 
        cpp_type: double
        group_name: Advanced
        description: |
          The scale factor for the predictor (can range from 0 to 1)
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: ss_check_tol
        required: No
        default: !!str 1e-08
        cpp_type: double
        group_name: Advanced
        description: |
          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.
      - name: ss_tmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          Minimum number of timesteps to take before checking for steady state conditions.
      - name: start_time
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The start time of the simulation
      - name: sync_times
        required: No
        default: !!str -1.79769e+308 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          A list of times that will be solved for provided they are within the simulation time
      - name: time_dt
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of dt
      - name: time_period_ends
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The end times of time periods
      - name: time_period_starts
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The start times of time periods
      - name: time_periods
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: Time Periods
        description: |
          The names of periods
      - name: time_t
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of t
      - name: trans_ss_check
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether or not to check for steady state conditions
      - name: type
        required: No
        default: !!str SolutionTimeAdaptive
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: use_AB2
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether to use the Adams-Bashforth 2 predictor
      - name: use_littlef
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          if a function evaluation should be used or time deriv's in predictors
      subblocks:
    - name: /Executioner/<type>/Steady
      description: !!str
      type: 
      parameters:
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: type
        required: No
        default: !!str Steady
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Executioner/<type>/Transient
      description: !!str
      type: 
      parameters:
      - name: abort_on_solve_fail
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          abort if solve not converged rather than cut timestep
      - name: dt
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The timestep size between solves
      - name: dtmax
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: Advanced
        description: |
          The maximum timestep size in an adaptive run
      - name: dtmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The minimum timestep size in an adaptive run
      - name: end_time
        required: No
        default: !!str 1e+30
        cpp_type: double
        group_name: 
        description: |
          The end time of the simulation
      - name: growth_factor
        required: No
        default: !!str 2
        cpp_type: double
        group_name: Advanced
        description: |
          Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.  For use with 'time_t' and 'time_dt'.
      - name: n_startup_steps
        required: No
        default: !!str 0
        cpp_type: int
        group_name: Advanced
        description: |
          The number of timesteps during startup
      - name: num_steps
        required: No
        default: !!str 1.79769e+308
        cpp_type: double
        group_name: 
        description: |
          The number of timesteps in a transient run
      - name: predictor_scale
        required: No
        default: !!str 
        cpp_type: double
        group_name: Advanced
        description: |
          The scale factor for the predictor (can range from 0 to 1)
      - name: restart_file_base
        required: No
        default: !!str 
        cpp_type: std::string
        group_name: Restart
        description: |
          File base name used for restart
      - name: ss_check_tol
        required: No
        default: !!str 1e-08
        cpp_type: double
        group_name: Advanced
        description: |
          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.
      - name: ss_tmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          Minimum number of timesteps to take before checking for steady state conditions.
      - name: start_time
        required: No
        default: !!str 0
        cpp_type: double
        group_name: Advanced
        description: |
          The start time of the simulation
      - name: sync_times
        required: No
        default: !!str -1.79769e+308 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          A list of times that will be solved for provided they are within the simulation time
      - name: time_dt
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of dt
      - name: time_period_ends
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The end times of time periods
      - name: time_period_starts
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Time Periods
        description: |
          The start times of time periods
      - name: time_periods
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: Time Periods
        description: |
          The names of periods
      - name: time_t
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: Advanced
        description: |
          The values of t
      - name: trans_ss_check
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether or not to check for steady state conditions
      - name: type
        required: No
        default: !!str Transient
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: use_AB2
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          Whether to use the Adams-Bashforth 2 predictor
      - name: use_littlef
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          if a function evaluation should be used or time deriv's in predictors
      subblocks:
  - name: /Executioner/Adaptivity
    description: !!str
    type: 
    parameters:
    - name: coarsen_fraction
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The fraction of elements or error to coarsen. Should be between 0 and 1.
    - name: cycles_per_step
      required: No
      default: !!str 1
      cpp_type: unsigned int
      group_name: 
      description: |
        The number of adaptivity cycles per step
    - name: error_estimator
      required: No
      default: !!str KellyErrorEstimator
      cpp_type: MooseEnum
      group_name: 
      options: KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator
      description: |
        The class name of the error estimator you want to use.
    - name: initial_adaptivity
      required: No
      default: !!str 0
      cpp_type: unsigned int
      group_name: 
      description: |
        The number of adaptivity steps to perform using the initial conditions
    - name: max_h_level
      required: No
      default: !!str 0
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of times a single element can be refined. If 0 then infinite.
    - name: print_changed_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Determines whether information about the mesh is printed when adaptivity occurs
    - name: refine_fraction
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The fraction of elements or error to refine. Should be between 0 and 1.
    - name: start_time
      required: No
      default: !!str -1.79769e+308
      cpp_type: double
      group_name: 
      description: |
        The time that adaptivity will be active after.
    - name: steps
      required: No
      default: !!str 0
      cpp_type: unsigned int
      group_name: 
      description: |
        The number of adaptivity steps to perform at any one time for steady state
    - name: stop_time
      required: No
      default: !!str 1.79769e+308
      cpp_type: double
      group_name: 
      description: |
        The time after which adaptivity will no longer be active.
    - name: weight_names
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        List of names of variables that will be associated with weight_values
    - name: weight_values
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        List of values between 0 and 1 to weight the associated weight_names error by
    subblocks:
  - name: /Executioner/Quadrature
    description: !!str
    type: 
    parameters:
    - name: order
      required: No
      default: !!str AUTO
      cpp_type: MooseEnum
      group_name: 
      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH
      description: |
        Order of the quadrature
    - name: type
      required: No
      default: !!str GAUSS
      cpp_type: MooseEnum
      group_name: 
      options: CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP
      description: |
        Type of the quadrature rule
    subblocks:
  - name: /Executioner/TimePeriods
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /Executioner/TimePeriods/*
      description: !!str
      type: 
      parameters:
      - name: active_bcs
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          The list of active boundary conditions during this time period (must not be used with "inactive_bcs")
      - name: active_kernels
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          The list of active kernels during this time period (must not be used with "inactive_kernels")
      - name: inactive_bcs
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          The list of inactive boundary conditions during this time period (must not be used with "active_bcs")
      - name: inactive_kernels
        required: No
        default: !!str 
        cpp_type: std::vector<std::string, std::allocator<std::string> >
        group_name: 
        description: |
          The list of inactive kernels during this time period (must not be used with "active_kernels")
      - name: start
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          The start time for this time period
      subblocks:
- name: /Functions
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Functions/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Functions/Composite
    description: !!str
    type: 
    parameters:
    - name: functions
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The functions to be multiplied together.
    - name: scale_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Scale factor to be applied to the ordinate values
    - name: type
      required: No
      default: !!str Composite
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Functions/DeCARTInterfaceFunction
    description: !!str
    type: 
    parameters:
    - name: datatype_DeCART
      required: No
      default: !!str 4
      cpp_type: int
      group_name: 
      description: |
        1 = one group flux, 2 = fast flux, 3 = power density, 4 = fission rate density
    - name: dim
      required: No
      default: !!str 2
      cpp_type: int
      group_name: 
      description: |
        Number of dimensions in FOX/BISON simulation
    - name: fname_DeCART
      required: No
      default: !!str decart.inp
      cpp_type: std::string
      group_name: 
      description: |
        Name of the DeCART input file
    - name: hm_mass_kg0
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The initial mass of U and Pu for the entire DeCART domain
    - name: lsax
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Indicates whether you want to scale the axial dimension of the DeCART region of interest to match BISON
    - name: path_DeCART
      required: No
      default: !!str ./decart/
      cpp_type: std::string
      group_name: 
      description: |
        Path to the DeCART input and .moc1 files
    - name: pinid
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        ID for the location of the pin in the DeCART model
    - name: pintyp
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        ID for the pin type in DeCART (Pin type is determined by material composition)
    - name: type
      required: No
      default: !!str DeCARTInterfaceFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: zmax_BISON
      required: No
      default: !!str 0.01
      cpp_type: double
      group_name: 
      description: |
        The maximum axial coordinate of the fuel in the BISON rodlet
    - name: zmax_DeCART
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The maximum axial coordinate of the region of interest of the DeCART rod
    - name: zmin_BISON
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The minimum axial coordinate of the fuel in the BISON rodlet
    - name: zmin_DeCART
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The minimum axial coordinate of the region of interest of the DeCART rod
    subblocks:
  - name: /Functions/DeCARTNormalizedInterfaceFunction
    description: !!str
    type: 
    parameters:
    - name: datatype_DeCART
      required: No
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        1 = one group flux, 2 = fast flux, 3 = power density, 4 = fission rate density
    - name: dim
      required: No
      default: !!str 2
      cpp_type: int
      group_name: 
      description: |
        Number of dimensions in FOX/BISON simulation
    - name: ratio_postprocessor
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the post processor which the values need to be ratio'd by
    - name: type
      required: No
      default: !!str DeCARTNormalizedInterfaceFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Functions/ParsedFunction
    description: !!str
    type: 
    parameters:
    - name: type
      required: No
      default: !!str ParsedFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: vals
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The initial_vals of the variables (optional)
    - name: value
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The user defined function.
    - name: vars
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The constant variables (excluding t,x,y,z) in the forcing function.
    subblocks:
  - name: /Functions/ParsedGradFunction
    description: !!str
    type: 
    parameters:
    - name: grad_x
      required: No
      default: !!str 0
      cpp_type: std::string
      group_name: 
      description: |
        Partial with respect to x.
    - name: grad_y
      required: No
      default: !!str 0
      cpp_type: std::string
      group_name: 
      description: |
        Partial with respect to y.
    - name: grad_z
      required: No
      default: !!str 0
      cpp_type: std::string
      group_name: 
      description: |
        Partial with respect to z.
    - name: type
      required: No
      default: !!str ParsedGradFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: vals
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The initial_vals of the variables (optional)
    - name: value
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The user defined function.
    - name: vars
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The constant variables (excluding t,x,y,z) in the forcing function.
    subblocks:
  - name: /Functions/PiecewiseBilinear
    description: !!str
    type: 
    parameters:
    - name: axis
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The axis used (0, 1, or 2 for x, y, or z).
    - name: scale_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Scale factor to be applied to the axis, yaxis, or xaxis values
    - name: type
      required: No
      default: !!str PiecewiseBilinear
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: xaxis
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).
    - name: yaxis
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).
    - name: yourFileName
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        File holding your csv data for use with PiecewiseBilinear
    subblocks:
  - name: /Functions/PiecewiseLinear
    description: !!str
    type: 
    parameters:
    - name: axis
      required: No
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position
    - name: scale_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Scale factor to be applied to the ordinate values
    - name: type
      required: No
      default: !!str PiecewiseLinear
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: x
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The abscissa values
    - name: y
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The ordinate values
    subblocks:
  - name: /Functions/PiecewiseLinearFile
    description: !!str
    type: 
    parameters:
    - name: format
      required: No
      default: !!str rows
      cpp_type: std::string
      group_name: 
      description: |
        Format of csv data file that is in either in columns or rows
    - name: scale_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Scale factor to be applied to the axis values
    - name: type
      required: No
      default: !!str PiecewiseLinearFile
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: yourFileName
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        File holding your csv data for use with PiecewiseLilinearFile
    subblocks:
  - name: /Functions/SolutionFunction
    description: !!str
    type: 
    parameters:
    - name: es
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the file holding the equation system info in xda format (xda only).
    - name: file_type
      required: No
      default: !!str xda
      cpp_type: std::string
      group_name: 
      description: |
        The type of format that is to be read (xda | exodusII).
    - name: mesh
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the mesh file.
    - name: scale_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Scale factor to be applied to the values
    - name: system
      required: No
      default: !!str NonlinearSystem
      cpp_type: std::string
      group_name: 
      description: |
        The name of the system to pull values out of (xda only).
    - name: timestep
      required: No
      default: !!str -1
      cpp_type: int
      group_name: 
      description: |
        Index of the single timestep used (exodusII only).  If not supplied, time interpolation will occur.
    - name: type
      required: No
      default: !!str SolutionFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The name of the variable you want to use for values.
    subblocks:
- name: /GlobalParams
  description: !!str
  type: 
  parameters:
  subblocks:
- name: /ICs
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /ICs/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /ICs/BoundingBoxIC
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
    - name: inside
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The value of the variable inside the box
    - name: outside
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The value of the variable outside the box
    - name: type
      required: No
      default: !!str BoundingBoxIC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: No
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The variable this InitialCondtion is supposed to provide values for.
    - name: x1
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The x coordinate of the lower left-hand corner of the box
    - name: x2
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The x coordinate of the upper right-hand corner of the box
    - name: y1
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The y coordinate of the lower left-hand corner of the box
    - name: y2
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The y coordinate of the upper right-hand corner of the box
    - name: z1
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The z coordinate of the lower left-hand corner of the box
    - name: z2
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The z coordinate of the upper right-hand corner of the box
    subblocks:
  - name: /ICs/ConstantIC
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
    - name: type
      required: No
      default: !!str ConstantIC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: No
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The variable this InitialCondtion is supposed to provide values for.
    subblocks:
  - name: /ICs/FunctionIC
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The initial condition function.
    - name: type
      required: No
      default: !!str FunctionIC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: No
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The variable this InitialCondtion is supposed to provide values for.
    subblocks:
  - name: /ICs/RandomIC
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
    - name: max
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Upper bound of the randomly generated values
    - name: min
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Lower bound of the randomly generated values
    - name: seed
      required: No
      default: !!str 0
      cpp_type: unsigned int
      group_name: 
      description: |
        Seed value for the random number generator
    - name: type
      required: No
      default: !!str RandomIC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: No
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The variable this InitialCondtion is supposed to provide values for.
    subblocks:
  - name: /ICs/ScalarConstantIC
    description: !!str
    type: 
    parameters:
    - name: type
      required: No
      default: !!str ScalarConstantIC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: No
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The variable this initial condition is supposed to provide values for.
    subblocks:
- name: /Kernels
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Kernels/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Kernels/AnisotropicDiffusion
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: tensor_coeff
      required: Yes
      default: !!str 
      cpp_type: libMesh::TensorValue<double>
      group_name: 
      description: |
        The Tensor to multiply the Diffusion operator by
    - name: type
      required: No
      default: !!str AnisotropicDiffusion
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/ArrheniusDiffusion
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str ArrheniusDiffusion
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/BodyForce
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        A function that describes the body force
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str BodyForce
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/BodyForceVoid
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: c
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        void concentration
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        A function that describes the body force
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str BodyForceVoid
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/CoefDiffusion
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: coef
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str CoefDiffusion
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/CoefTimeDerivative
    description: !!str
    type: 
    parameters:
    - name: Coefficient
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The coefficient for the time derivative kernel
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: lumping
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        True for mass matrix lumping, false otherwise
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str CoefTimeDerivative
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/Convection
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str Convection
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    - name: x
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Component of velocity in the x direction
    - name: y
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Component of velocity in the y direction
    - name: z
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Component of velocity in the z direction
    subblocks:
  - name: /Kernels/CoupledForce
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str CoupledForce
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: v
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The coupled variable which provides the force
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/Decay
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str Decay
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/Diffusion
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str Diffusion
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/GaussContForcing
    description: !!str
    type: 
    parameters:
    - name: amplitude
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Aplitude of the bell curve
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str GaussContForcing
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    - name: x_center
      required: No
      default: !!str 4
      cpp_type: double
      group_name: 
      description: |
        Center of the hump in the X direction
    - name: x_spread
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Spread of the curve in the x direction (sigma_x)
    - name: y_center
      required: No
      default: !!str 6
      cpp_type: double
      group_name: 
      description: |
        Center of the hump in the Y direction
    - name: y_spread
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Spread of the curve in the y direction (sigma_y)
    - name: z_center
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Center of the hump in the Z direction
    - name: z_spread
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Spread of the curve in the z direction (sigma_z)
    subblocks:
  - name: /Kernels/Gravity
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        A function that describes the body force
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str Gravity
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/HeatConduction
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str HeatConduction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/HeatConductionImplicitEuler
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: lumping
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        True for mass matrix lumping, false otherwise
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str HeatConductionImplicitEuler
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/HeatSource
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Function describing the volumetric heat source
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str HeatSource
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Value of heat source.  Multiplied by function if present.
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/HomogenizationHeatConduction
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str HomogenizationHeatConduction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/HomogenizationKernel
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: column
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str HomogenizationKernel
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/ImplicitEuler
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: lumping
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        True for mass matrix lumping, false otherwise
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str ImplicitEuler
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/JouleHeating
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: potential
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Gradient of the electrical potential
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str JouleHeating
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/NeutronHeatSource
    description: !!str
    type: 
    parameters:
    - name: area
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Cross sectional area
    - name: axial_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Function describing the axial profile of power
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: energy_per_fission
      required: No
      default: !!str 3.28451e-11
      cpp_type: double
      group_name: 
      description: |
        Energy Released per Fission
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fission Rate
    - name: fraction
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Fraction of power applied
    - name: inner_diameter
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Inner diameter
    - name: outer_diameter
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Outer diameter
    - name: rod_ave_lin_pow
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Function describing rod average linear power
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str NeutronHeatSource
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: units
      required: No
      default: !!str J/fission
      cpp_type: std::string
      group_name: 
      description: |
        Energy Released per Fission
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/OxygenDiffusion
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str OxygenDiffusion
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/Reaction
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str Reaction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/RealPropertyOutput
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: prop_name
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The Real material property you would like to output
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str RealPropertyOutput
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/SharpInterfaceForcing
    description: !!str
    type: 
    parameters:
    - name: amplitude
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The amplitude of the forcing function
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str SharpInterfaceForcing
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    - name: x_center
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The parametric x center of the forcing function
    - name: y_center
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The parametric y center of the forcing function
    subblocks:
  - name: /Kernels/SolidMechImplicitEuler
    description: !!str
    type: 
    parameters:
    - name: artificial_scaling
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Factor to replace rho/dt^2
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str SolidMechImplicitEuler
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/SolidMechTempCoupleX
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: constant_properties
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str SolidMechTempCoupleX
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/SolidMechTempCoupleY
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: constant_properties
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str SolidMechTempCoupleY
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/SolidMechTempCoupleZ
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: constant_properties
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str SolidMechTempCoupleZ
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/SolidMechX
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: constant_properties
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str SolidMechX
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    - name: y
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Displacement in the y Direction
    - name: z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Displacement in the z Direction
    subblocks:
  - name: /Kernels/SolidMechY
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: constant_properties
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str SolidMechY
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    - name: x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Displacement in the x Direction
    - name: z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Displacement in the z Direction
    subblocks:
  - name: /Kernels/SolidMechZ
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: constant_properties
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not some optimizations can be made because the properties are going to be constant on each subdomain.  Note that they can still change from one subdomain to the next.
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str SolidMechZ
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    - name: x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Displacement in the x Direction
    - name: y
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Displacement in the y Direction
    subblocks:
  - name: /Kernels/StressDivergence
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The temperature
    - name: type
      required: No
      default: !!str StressDivergence
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/StressDivergenceRZ
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for r, 1 for z)
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The temperature
    - name: type
      required: No
      default: !!str StressDivergenceRZ
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/TimeDerivative
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: lumping
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        True for mass matrix lumping, false otherwise
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str TimeDerivative
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
  - name: /Kernels/UserForcingFunction
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that this kernel will be applied to
    - name: diag_save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The forcing function
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: Advanced
      description: |
        The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)
    - name: type
      required: No
      default: !!str UserForcingFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
- name: /Materials
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Materials/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Materials/AbaqusCreepMaterial
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: integration_flag
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The creep integration method: Explicit = 0 and Implicit = 1
    - name: num_state_vars
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The number of state variables this CREEP routine will use
    - name: plugin
      required: Yes
      default: !!str 
      cpp_type: FileName
      group_name: 
      description: |
        The path to the compiled dynamic library for the plugin you want to use (without -opt.plugin or -dbg.plugin)
    - name: poissons_ratio
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poissons Ratio
    - name: routine_flag
      required: No
      default: !!str 0
      cpp_type: unsigned int
      group_name: 
      description: |
        The flag determining when the routine is called: Start of increment = 0 and End of Increment = 1
    - name: solve_definition
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        Creep/Swell Explicit/Implicit Integration Definition to use: 1 - 5
    - name: type
      required: No
      default: !!str AbaqusCreepMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's Modulus
    subblocks:
  - name: /Materials/AbaqusUmatMaterial
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: mechanical_constants
      required: Yes
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Mechanical Material Properties
    - name: num_state_vars
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The number of state variables this UMAT is going to use
    - name: plugin
      required: Yes
      default: !!str 
      cpp_type: FileName
      group_name: 
      description: |
        The path to the compiled dynamic library for the plugin you want to use
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_constants
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Thermal Material Properties
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str AbaqusUmatMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/ArrheniusDiffusionCoef
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: d1
      required: No
      default: !!str 5.6e-08
      cpp_type: double
      group_name: 
      description: |
        first coefficient (m**2/s)
    - name: d2
      required: No
      default: !!str 0.00052
      cpp_type: double
      group_name: 
      description: |
        second coefficient (m**2/s)
    - name: gas_constant
      required: No
      default: !!str 8.3143
      cpp_type: double
      group_name: 
      description: |
        universal gas constant (J/mol-K)
    - name: q1
      required: No
      default: !!str 209000
      cpp_type: double
      group_name: 
      description: |
        first activation energy (J/mol)
    - name: q2
      required: No
      default: !!str 362000
      cpp_type: double
      group_name: 
      description: |
        second activation energy (J/mol)
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temp
    - name: type
      required: No
      default: !!str ArrheniusDiffusionCoef
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/CLSHPlasticMaterial
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: c_alpha
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        creep constant
    - name: c_beta
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        creep constant
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: hardening_constant
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Hardening slope
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of Sub-newton iterations
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: print_debug_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to print debugging information
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Sub-BiLin iteration tolerance
    - name: type
      required: No
      default: !!str CLSHPlasticMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The point at which plastic strain begins accumulating
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/Constant
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: d_1
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: d_2
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: density
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: gas_constant
      required: No
      default: !!str 0.0083143
      cpp_type: double
      group_name: 
      description: |
        
    - name: lambda
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: neutron_absorption_xs
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: neutron_diffusion_coefficient
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: neutron_fission_xs
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: neutron_per_fission
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: neutron_velocity
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: poissons_ratio
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: q_1
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: q_2
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: specific_heat
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: t_ref
      required: No
      default: !!str 300
      cpp_type: double
      group_name: 
      description: |
        
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_conductivity
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: thermal_expansion
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    - name: type
      required: No
      default: !!str Constant
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/CoolantChannelMaterial
    description: !!str
    type: 
    parameters:
    - name: axial_length
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        axial length of fuel rod
    - name: axial_power_profile
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Axial power profile
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: chf_correlation_type
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        CHF correlation
    - name: coupledEnthalpy
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        coupled coolant enthalpy
    - name: frac_power_in_coolant
      required: No
      default: !!str 0.03
      cpp_type: double
      group_name: 
      description: |
        fraction of heat deposited in coolant
    - name: heat_flux
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat flux in W/m^2-K 
    - name: heat_input
      required: No
      default: !!str heat_input_z1 heat_input_z2 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        Name of postprocessor holding heat input
    - name: heat_input_z1
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name of postprocessor holding heat input
    - name: heat_input_z2
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name of postprocessor holding heat input
    - name: heat_transfer_coefficient
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Heat transfer coefficient in W/m^2-K
    - name: heat_transfer_mode
      required: No
      default: !!str 0
      cpp_type: int
      group_name: 
      description: |
        heat transfer mode determined by internal calculation
    - name: htc_correlation_type
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        heat transfer correlation type 
    - name: inlet_massflux
      required: No
      default: !!str 3600
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet mass flux in kg/m^2-sec
    - name: inlet_pressure
      required: No
      default: !!str 15.5E6
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet pressure in Pa
    - name: inlet_temperature
      required: No
      default: !!str 300
      cpp_type: FunctionName
      group_name: 
      description: |
        Inlet temperature in K 
    - name: linear_heat_rate
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Linear heat generation rate in W/m
    - name: number_axial_zone
      required: No
      default: !!str 0
      cpp_type: int
      group_name: 
      description: |
        Number of heat flux integral  postprocessors
    - name: rod_diameter
      required: No
      default: !!str 0.01
      cpp_type: double
      group_name: 
      description: |
        Rod diameter in meter
    - name: rod_pitch
      required: No
      default: !!str 0.0126
      cpp_type: double
      group_name: 
      description: |
        Rod pitch in meter
    - name: type
      required: No
      default: !!str CoolantChannelMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The name of the variable representing temperature
    subblocks:
  - name: /Materials/CreepMOX
    description: !!str
    type: 
    parameters:
    - name: Pu_content
      required: No
      default: !!str 7
      cpp_type: double
      group_name: 
      description: |
        content of  PuO2, in weight percent
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled fission rate
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: grain_radius
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Fuel grain radius (m)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: transient_stress_rate
      required: No
      default: !!str 50
      cpp_type: double
      group_name: 
      description: |
        stress rate limit which activates transient creep
    - name: type
      required: No
      default: !!str CreepMOX
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/CreepPyC
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: flux
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str CreepPyC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/CreepSiC
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: k_function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        K coefficient as a function of temperature (Kelvin)
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str CreepSiC
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/CreepUO2
    description: !!str
    type: 
    parameters:
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled burnup
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled fission rate
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: grain_radius
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Fuel grain radius (m)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: matpro_poissons_ratio
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Flag for using MATPRO to compute Poisson's ratio
    - name: matpro_thermal_expansion
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Flag for using MATPRO to compute the thermal expansion coefficient
    - name: matpro_youngs_modulus
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Flag for using MATPRO to compute Young's modulus
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: oxy_to_metal_ratio
      required: No
      default: !!str 2
      cpp_type: double
      group_name: 
      description: |
        Oxygen to metal ratio
    - name: po2_fraction
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Weight fraction of PO2
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 0.0001
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str CreepUO2
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/CreepZry
    description: !!str
    type: 
    parameters:
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fast_neutron_fluence
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron fluence
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: model_irradiation_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on irradiation induced creep
    - name: model_primary_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on primary creep
    - name: model_thermal_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on steady state thermal creep
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 0.0001
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str CreepZry
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/Density
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: density
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Density
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: type
      required: No
      default: !!str Density
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/Elastic
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str Elastic
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/ForMas
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bubble_radius
      required: No
      default: !!str 5e-07
      cpp_type: double
      group_name: 
      description: |
        grain boundary bubble radius (m)
    - name: bubble_shape_factor
      required: No
      default: !!str 0.287
      cpp_type: double
      group_name: 
      description: |
        non-spherical bubble shape factor
    - name: bubbles_per_fragment
      required: No
      default: !!str 24
      cpp_type: double
      group_name: 
      description: |
        number of intragranular bubbles nucleated per fission fragment
    - name: calibration_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        calibration factor multiplied by gas saturation density
    - name: external_pressure
      required: No
      default: !!str 1e+07
      cpp_type: double
      group_name: 
      description: |
        external hydrostatic pressure (Pa)
    - name: external_pressure_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The name of the external pressure function.
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fission Rate
    - name: fractional_coverage
      required: No
      default: !!str 0.5
      cpp_type: double
      group_name: 
      description: |
        fractional coverage of grain boundary at saturation
    - name: fractional_yield
      required: No
      default: !!str 0.3017
      cpp_type: double
      group_name: 
      description: |
        fraction yield of fission gas atoms per fission
    - name: fragment_influence
      required: No
      default: !!str 1e-09
      cpp_type: double
      group_name: 
      description: |
        fission fragment range of influence (m)
    - name: fragment_range
      required: No
      default: !!str 6e-06
      cpp_type: double
      group_name: 
      description: |
        fission fragment travel distance before coming to rest (m)
    - name: grain_radius
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        fuel grain radius (m)
    - name: hydrostatic_stress
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Hydrostatic Stress
    - name: plenum_pressure
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the plenum_pressure postprocessor value.
    - name: release_fraction
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        fraction of boundary and resolved gas released at saturation
    - name: resolution_depth
      required: No
      default: !!str 1e-08
      cpp_type: double
      group_name: 
      description: |
        resolution layer depth (m)
    - name: resolution_rate
      required: No
      default: !!str 1e-07
      cpp_type: double
      group_name: 
      description: |
        resolution rate from intergranular bubbles (1/s)
    - name: surface_tension
      required: No
      default: !!str 0.626
      cpp_type: double
      group_name: 
      description: |
        bubble surface tension (J/m**2)
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temp
    - name: type
      required: No
      default: !!str ForMas
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/GapConductance
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: gap_conductivity
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The thermal conductivity of the gap material
    - name: gap_distance
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Distance across the gap
    - name: gap_temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Temperature on the other side of the gap
    - name: max_gap
      required: No
      default: !!str 1e+06
      cpp_type: double
      group_name: 
      description: |
        A maximum gap size
    - name: min_gap
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        A minimum gap size
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: No
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: quadrature
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to do Quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp should NOT be provided (and will be ignored) however paired_boundary IS then required and so is 'temp'.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The temperature variable
    - name: type
      required: No
      default: !!str GapConductance
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
  - name: /Materials/GapConductanceLWR
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: contact_coef
      required: No
      default: !!str 10
      cpp_type: double
      group_name: 
      description: |
        The leading coefficient on the solid-solid conduction relation (1/sqrt(m)
    - name: contact_pressure_input
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        A fixed value for the contact pressure (Pa)
    - name: emissivity_clad
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The emissivity of the cladding surface
    - name: emissivity_fuel
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The emissivity of the fuel surface
    - name: external_pressure
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        input external pressure (Pa)
    - name: gap_conductivity
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The thermal conductivity of the gap material
    - name: gap_distance
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Distance across the gap
    - name: gap_temp
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Temperature on the other side of the gap
    - name: gas_released
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The postprocessor(s) that will give the gas released
    - name: gas_released_fractions
      required: No
      default: !!str 0 0 0.153 0.847 0 0 0 0 0 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The fraction of released gas that is assigned to helium, argon, krypton, xenon, hydrogen, nitrogen, oxygen, carbon monoxide, carbon dioxide, and water vapor
    - name: initial_gas_fractions
      required: No
      default: !!str 1 0 0 0 0 0 0 0 0 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The initial fractions of constituent gases (helium, argon, krypton, xenon, hydrogen, nitrogen, oxygen, carbon monoxide, carbon dioxide, water vapor)
    - name: initial_moles
      required: No
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor that will give the initial moles of gas
    - name: jumpdistance_clad
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The temperature jump distance for the cladding
    - name: jumpdistance_fuel
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The temperature jump distance for the fuel
    - name: max_gap
      required: No
      default: !!str 1e+06
      cpp_type: double
      group_name: 
      description: |
        A maximum gap size
    - name: meyer_hardness
      required: No
      default: !!str 6.8e+08
      cpp_type: double
      group_name: 
      description: |
        The Meyer hardness of the softer material (Pa)
    - name: min_gap
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        A minimum gap size
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: paired_boundary
      required: No
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The boundary to be penetrated
    - name: plenum_pressure
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the plenum_pressure postprocessor value.
    - name: quadrature
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to do Quadrature point based gap heat transfer.  If this is true then gap_distance and gap_temp should NOT be provided (and will be ignored) however paired_boundary IS then required and so is 'temp'.
    - name: refab_gas_fractions
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The fractions of constituent gases at refabrication (helium, argon, krypton, xenon, hydrogen, nitrogen, oxygen, carbon monoxide, carbon dioxide, water vapor)
    - name: refab_time
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The time at which the plenum pressure must be reinitialized due to fuel rod refabrication.
    - name: refab_type
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        The type of refabrication.  0 for instantaneous reset of gas, 1 for reset with constant fraction until next refabrication
    - name: roughness_clad
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        The roughness of the cladding surface (m)
    - name: roughness_coef
      required: No
      default: !!str 1.5
      cpp_type: double
      group_name: 
      description: |
        The coefficient for the roughness summation
    - name: roughness_fuel
      required: No
      default: !!str 1e-06
      cpp_type: double
      group_name: 
      description: |
        The roughness of the fuel surface (m)
    - name: stefan_boltzmann
      required: No
      default: !!str 5.669e-08
      cpp_type: double
      group_name: 
      description: |
        The Stefan-Boltzmann constant
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The temperature variable
    - name: type
      required: No
      default: !!str GapConductanceLWR
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Temperature variable
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
  - name: /Materials/GenericConstantMaterial
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: prop_names
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The names of the properties this material will have
    - name: prop_values
      required: No
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        The values associated with the named properties
    - name: type
      required: No
      default: !!str GenericConstantMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/GenericFunctionMaterial
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: prop_names
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The names of the properties this material will have
    - name: prop_values
      required: No
      default: !!str 
      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >
      group_name: 
      description: |
        The corresponding names of the functions that are going to provide the values for the variables
    - name: type
      required: No
      default: !!str GenericFunctionMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/HeatConductionMaterial
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: specific_heat
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The specific heat value
    - name: specific_heat_temperature_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Specific heat as a function of temperature.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_conductivity
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal conductivity value
    - name: thermal_conductivity_temperature_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal conductivity as a function of temperature.
    - name: thermal_conductivity_x
      required: No
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The thermal conductivity PP name in the x direction
    - name: thermal_conductivity_y
      required: No
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The thermal conductivity PP name in the y direction
    - name: thermal_conductivity_z
      required: No
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The thermal conductivity PP name in the z direction
    - name: type
      required: No
      default: !!str HeatConductionMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/IrradiationGrowthZr4
    description: !!str
    type: 
    parameters:
    - name: Ag
      required: No
      default: !!str 3e-20
      cpp_type: double
      group_name: 
      description: |
        Material constant that depends on the cladding metalurgical state
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: fast_neutron_fluence
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fast Neutron Fluence
    - name: growth_direction
      required: No
      default: !!str 1
      cpp_type: unsigned int
      group_name: 
      description: |
        The direction of elongation
    - name: ng
      required: No
      default: !!str 0.794
      cpp_type: double
      group_name: 
      description: |
        Material constant that depends on the cladding metalurgical state
    - name: type
      required: No
      default: !!str IrradiationGrowthZr4
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/LinearAnisotropicMaterial
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: c
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        variable that zeros out the stiffness
    - name: disp_x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: euler_angle_1
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Euler angle in direction 1
    - name: euler_angle_2
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Euler angle in direction 2
    - name: euler_angle_3
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Euler angle in direction 3
    - name: material_constant_c11
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Material modulus C11
    - name: material_constant_c12
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Material modulus C12
    - name: material_constant_c44
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Material modulus C44
    - name: poissons_ratio
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's Ratio
    - name: t_ref
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The reference temperature at which this material has zero strain.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The temperature if you want thermal expansion.
    - name: thermal_expansion
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: type
      required: No
      default: !!str LinearAnisotropicMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's Modulus
    subblocks:
  - name: /Materials/LinearGeneralAnisotropicMaterial
    description: !!str
    type: 
    parameters:
    - name: C_matrix
      required: Yes
      default: !!str 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Stiffness tensor for matrix
    - name: all_21
      required: Yes
      default: !!str 
      cpp_type: bool
      group_name: 
      description: |
        True if all 21 independent values are given; else false indicates only 9 values given (C11, C12, C13, C22, C23, C33, C44, C55, C66.
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: c
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        variable that zeros out the stiffness
    - name: disp_x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: euler_angle_1
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Euler angle in direction 1
    - name: euler_angle_2
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Euler angle in direction 2
    - name: euler_angle_3
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Euler angle in direction 3
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The temperature if you want thermal expansion.
    - name: type
      required: No
      default: !!str LinearGeneralAnisotropicMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/LinearIsotropicMaterial
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: c
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        variable that zeros out the stiffness
    - name: disp_x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: poissons_ratio
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's Ratio
    - name: t_ref
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The reference temperature at which this material has zero strain.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The temperature if you want thermal expansion.
    - name: thermal_expansion
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: type
      required: No
      default: !!str LinearIsotropicMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's Modulus
    subblocks:
  - name: /Materials/LinearStrainHardening
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: hardening_constant
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Hardening slope
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of Sub-newton iterations
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Sub-BiLin iteration tolerance
    - name: type
      required: No
      default: !!str LinearStrainHardening
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The point at which plastic strain begins accumulating
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/MacroElastic
    description: !!str
    type: 
    parameters:
    - name: C1111
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C1111 value
    - name: C1122
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C1122 value
    - name: C1133
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C1133 value
    - name: C1212
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C1212 value
    - name: C2222
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C2222 value
    - name: C2233
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C2233 value
    - name: C2323
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C2323 value
    - name: C3131
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C3131 value
    - name: C3333
      required: Yes
      default: !!str 
      cpp_type: PostprocessorName
      group_name: 
      description: |
        The postprocessor associated with the C3333 value
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str MacroElastic
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/MatproUO2
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: burnup
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: enrichment
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: gadolinia
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: heavy_metal_atoms
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: neutron_flux
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: otom
      required: No
      default: !!str 2
      cpp_type: double
      group_name: 
      description: |
        
    - name: oxygen
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Oxygen
    - name: sigma_f
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: temp
      required: No
      default: !!str 750
      cpp_type: double
      group_name: 
      description: |
        
    - name: temperature
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str MatproUO2
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/MechHT9
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str MechHT9
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/MechUO2
    description: !!str
    type: 
    parameters:
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: diameter
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        As fabricated cold diameter of pellet in meters
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled fission rate
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: gap
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        As fabricated cold diametral gap in meters
    - name: grain_radius
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Fuel grain radius (m)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: matpro_poissons_ratio
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Flag for using MATPRO to compute Poisson's ratio
    - name: matpro_thermal_expansion
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Flag for using MATPRO to compute the thermal expansion coefficient
    - name: matpro_youngs_modulus
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Flag for using MATPRO to compute Young's modulus
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: model_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on creep model
    - name: model_relocation
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on relocation model
    - name: model_swelling
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on swelling model
    - name: model_thermal_expansion
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on thermal expansion model
    - name: name_relocation_model
      required: No
      default: !!str RelocationUO2
      cpp_type: std::string
      group_name: 
      description: |
        name of relocation model
    - name: name_swelling_model
      required: No
      default: !!str VSwellingUO2
      cpp_type: std::string
      group_name: 
      description: |
        name of swelling model
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: oxy_to_metal_ratio
      required: No
      default: !!str 2
      cpp_type: double
      group_name: 
      description: |
        Oxygen to metal ratio
    - name: po2_fraction
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Weight fraction of PO2
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: q
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Linear heat rate in pellet in W/m
    - name: relative_tolerance
      required: No
      default: !!str 0.0001
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str MechUO2
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/MechZry
    description: !!str
    type: 
    parameters:
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cold_work_factor
      required: No
      default: !!str 0.01
      cpp_type: double
      group_name: 
      description: |
        Cold work factor
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fast_neutron_fluence
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron fluence
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: model_elastic_modulus
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to calculate elastic moduli internally
    - name: model_irradiation_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on irradiation induced creep
    - name: model_irradiation_growth
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on irradiation growth model
    - name: model_primary_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on primary creep
    - name: model_thermal_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on steady state thermal creep
    - name: model_thermal_expansion
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on thermal expansion model
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: oxygen_concentration
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Oxygen concentration (ppm)
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 0.0001
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str MechZry
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/PLC_LSH
    description: !!str
    type: 
    parameters:
    - name: absolute_stress_tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Convergence tolerance for combined plasticity-creep stress iteration
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: activation_energy
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Activation energy
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: coefficient
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Leading coefficent in power-law equation
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: gas_constant
      required: No
      default: !!str 8.3143
      cpp_type: double
      group_name: 
      description: |
        Universal gas constant
    - name: hardening_constant
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Hardening slope
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: m_exponent
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Exponent on time in power-law equation
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 30
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: n_exponent
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Exponent on effective stress in power-law equation
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str PLC_LSH
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The point at which plastic strain begins accumulating
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/PLSHPlasticMaterial
    description: !!str
    type: 
    parameters:
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: hardening_constant
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Hardening slope
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of Sub-newton iterations
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: print_debug_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to print debugging information
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Sub-BiLin iteration tolerance
    - name: type
      required: No
      default: !!str PLSHPlasticMaterial
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The point at which plastic strain begins accumulating
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/PowerLawCreep
    description: !!str
    type: 
    parameters:
    - name: activation_energy
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Activation energy
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: coefficient
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Leading coefficent in power-law equation
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: exponent
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Exponent in power-law equation
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: gas_constant
      required: No
      default: !!str 8.3143
      cpp_type: double
      group_name: 
      description: |
        Universal gas constant
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Convergence tolerance for sub-newtion iteration
    - name: type
      required: No
      default: !!str PowerLawCreep
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/PrimaryCreepZr4
    description: !!str
    type: 
    parameters:
    - name: a_coef
      required: No
      default: !!str 3.14e+24
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the thermal creep term
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: activation_energy
      required: No
      default: !!str 270000
      cpp_type: double
      group_name: 
      description: |
        The activation energy
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: c0_coef
      required: No
      default: !!str 9.881e-28
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the irradiation creep term
    - name: c1_exponent
      required: No
      default: !!str 0.85
      cpp_type: double
      group_name: 
      description: |
        The exponent on the irradition creep fast neutron flux term
    - name: c2_exponent
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The exponent on the irradiation creep stress term
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: gas_constant
      required: No
      default: !!str 8.3143
      cpp_type: double
      group_name: 
      description: |
        The universal gas constant
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: initial_primary_creep_ratio
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        raito of initial primary creep strain to saturated primary creep strain
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: model_modified_matsuo
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on matsuo model
    - name: model_primary_creep
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Set true to turn on primary creep model
    - name: n_exponent
      required: No
      default: !!str 5
      cpp_type: double
      group_name: 
      description: |
        The exponent in the thermal creep term
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 0.0001
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str PrimaryCreepZr4
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/PyCIrradiationStrain
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: fluence
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled fluence
    - name: pyc_type
      required: No
      default: !!str buffer
      cpp_type: MooseEnum
      group_name: 
      options: buffer dense
      description: |
        Type of PyC (buffer or dense)
    - name: type
      required: No
      default: !!str PyCIrradiationStrain
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/RelocationUO2
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup
    - name: burnup_relocation_stop
      required: No
      default: !!str 1e+12
      cpp_type: double
      group_name: 
      description: |
        Burnup at which relocation strain stops (in FIMA)
    - name: diameter
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        As fabricated cold diameter of pellet in meters
    - name: gap
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        As fabricated cold diametral gap in meters
    - name: q
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Linear heat rate in pellet in W/m
    - name: relocation_activation1
      required: No
      default: !!str 19685
      cpp_type: double
      group_name: 
      description: |
        First activation linear power in W/m term in relocation model
    - name: relocation_activation2
      required: No
      default: !!str 45931.8
      cpp_type: double
      group_name: 
      description: |
        Second activation linear power in W/m term in relocation model
    - name: relocation_activation3
      required: No
      default: !!str 32808.4
      cpp_type: double
      group_name: 
      description: |
        Third activation linear power in W/m term in relocation model
    - name: type
      required: No
      default: !!str RelocationUO2
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/RichUO2
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup Rate
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fission Rate
    - name: initial_density
      required: No
      default: !!str 10963
      cpp_type: double
      group_name: 
      description: |
        
    - name: initial_porosity
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        
    - name: oxygen
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Oxygen
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str RichUO2
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/Sifgr
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup
    - name: file_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        csv file holding linear power vs. time
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Fission Rate
    - name: format
      required: No
      default: !!str rows
      cpp_type: std::string
      group_name: 
      description: |
        format of csv data file that is either in columns or rows
    - name: function1
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        linear power function.
    - name: function2
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        axial power peaking function.
    - name: grain_radius
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        fuel grain radius (m)
    - name: hbs_release_burnup
      required: No
      default: !!str 100
      cpp_type: double
      group_name: 
      description: |
        HBS gas release threshold (MWd/kgU)
    - name: hydrostatic_pressure
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        hydrostatic pressure (Pa)
    - name: hydrostatic_stress
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Hydrostatic Stress
    - name: saturation_coverage
      required: No
      default: !!str 0.5
      cpp_type: double
      group_name: 
      description: |
        saturation coverage (/)
    - name: surface_tension
      required: No
      default: !!str 0.5
      cpp_type: double
      group_name: 
      description: |
        surface tension (J/m**2)
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str Sifgr
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/ThermalHT9
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str ThermalHT9
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/ThermalIrradiationCreepHT9
    description: !!str
    type: 
    parameters:
    - name: A
      required: No
      default: !!str 2.59e+14
      cpp_type: double
      group_name: 
      description: |
        Another fitting constant for the irradiation creep term, see explanation above
    - name: B
      required: No
      default: !!str 0.000183
      cpp_type: double
      group_name: 
      description: |
        A fitting constant for the irradiation creep term, see explanation above
    - name: C_5
      required: No
      default: !!str 1.17e+09
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the thermal creep term
    - name: C_6
      required: No
      default: !!str 8.33e+09
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the thermal creep term
    - name: Q
      required: No
      default: !!str 73000
      cpp_type: double
      group_name: 
      description: |
        The activation energy for irradiation creep
    - name: Q_4
      required: No
      default: !!str 83142
      cpp_type: double
      group_name: 
      description: |
        The activation energy
    - name: Q_5
      required: No
      default: !!str 108276
      cpp_type: double
      group_name: 
      description: |
        The activation energy
    - name: R
      required: No
      default: !!str 1.987
      cpp_type: double
      group_name: 
      description: |
        The universal gas constant
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: n_exponent_1
      required: No
      default: !!str 2
      cpp_type: double
      group_name: 
      description: |
        The exponent in the thermal creep term
    - name: n_exponent_2
      required: No
      default: !!str 5
      cpp_type: double
      group_name: 
      description: |
        The exponent in the thermal creep term
    - name: n_exponent_3
      required: No
      default: !!str 1.3
      cpp_type: double
      group_name: 
      description: |
        The exponent in the irradiation creep term
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 0.0001
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str ThermalIrradiationCreepHT9
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/ThermalIrradiationCreepPlasZr4
    description: !!str
    type: 
    parameters:
    - name: a_coef
      required: No
      default: !!str 3.14e+24
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the thermal creep term
    - name: absolute_stress_tolerance
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        Absolute stress convergence tolerance for combined plasticity-creep stress iteration
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: activation_energy
      required: No
      default: !!str 270000
      cpp_type: double
      group_name: 
      description: |
        The activation energy
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: c0_coef
      required: No
      default: !!str 9.881e-28
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the irradiation creep term
    - name: c1_exponent
      required: No
      default: !!str 0.85
      cpp_type: double
      group_name: 
      description: |
        The exponent on the irradition creep fast neutron flux term
    - name: c2_exponent
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The exponent on the irradiation creep stress term
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: gas_constant
      required: No
      default: !!str 8.3143
      cpp_type: double
      group_name: 
      description: |
        The universal gas constant
    - name: hardening_constant
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Hardening slope
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 30
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: n_exponent
      required: No
      default: !!str 5
      cpp_type: double
      group_name: 
      description: |
        The exponent in the thermal creep term
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str ThermalIrradiationCreepPlasZr4
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: yield_stress
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The point at which plastic strain begins accumulating
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/ThermalIrradiationCreepZr4
    description: !!str
    type: 
    parameters:
    - name: a_coef
      required: No
      default: !!str 3.14e+24
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the thermal creep term
    - name: absolute_tolerance
      required: No
      default: !!str 1e-20
      cpp_type: double
      group_name: 
      description: |
        Absolute convergence tolerance for sub-newtion iteration
    - name: activation_energy
      required: No
      default: !!str 270000
      cpp_type: double
      group_name: 
      description: |
        The activation energy
    - name: active_crack_planes
      required: No
      default: !!str 
      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
      group_name: 
      description: |
        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bulk_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bulk modulus for the material.
    - name: c0_coef
      required: No
      default: !!str 9.881e-28
      cpp_type: double
      group_name: 
      description: |
        The leading coefficent in the irradiation creep term
    - name: c1_exponent
      required: No
      default: !!str 0.85
      cpp_type: double
      group_name: 
      description: |
        The exponent on the irradition creep fast neutron flux term
    - name: c2_exponent
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The exponent on the irradiation creep stress term
    - name: cracking_release
      required: No
      default: !!str abrupt
      cpp_type: std::string
      group_name: 
      description: |
        The cracking release type.  Choices are abrupt (default) and exponential.
    - name: cracking_stress
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The stress threshold beyond which cracking occurs.  Must be positive.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The z displacement
    - name: fast_neutron_flux
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The fast neutron flux
    - name: formulation
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Element formulation.  Choices are "Nonlinear3D", "AxisymmetricRZ", and "Linear".  (Case insensitive.)
    - name: gas_constant
      required: No
      default: !!str 8.3143
      cpp_type: double
      group_name: 
      description: |
        The universal gas constant
    - name: increment_calculation
      required: No
      default: !!str RashidApprox
      cpp_type: std::string
      group_name: 
      description: |
        The algorithm to use when computing the incremental strain and rotation (RashidApprox or Eigen). For use with Nonlinear3D formulation.
    - name: lambda
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Lame's first parameter for the material.
    - name: large_strain
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to include large strain terms in AxisymmetricRZ and PlaneStrain formulations.
    - name: max_cracks
      required: No
      default: !!str 3
      cpp_type: unsigned int
      group_name: 
      description: |
        The maximum number of cracks allowed at a material point.
    - name: max_its
      required: No
      default: !!str 10
      cpp_type: unsigned int
      group_name: 
      description: |
        Maximum number of sub-newton iterations
    - name: n_exponent
      required: No
      default: !!str 5
      cpp_type: double
      group_name: 
      description: |
        The exponent in the thermal creep term
    - name: output
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The reporting postprocessor to use for the max_iterations value.
    - name: output_iteration_info
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set true to output sub-newton iteration information
    - name: poissons_ratio
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Poisson's ratio for the material.
    - name: poissons_ratio_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Poisson's ratio as a function of temperature.
    - name: relative_tolerance
      required: No
      default: !!str 0.0001
      cpp_type: double
      group_name: 
      description: |
        Relative convergence tolerance for sub-newtion iteration
    - name: shear_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The shear modulus of the material.
    - name: stress_free_temperature
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The stress-free temperature.  If not specified, the initial temperature is used.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: thermal_expansion
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The thermal expansion coefficient.
    - name: thermal_expansion_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Thermal expansion coefficient as a function of temperature.
    - name: type
      required: No
      default: !!str ThermalIrradiationCreepZr4
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: youngs_modulus
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Young's modulus of the material.
    - name: youngs_modulus_function
      required: No
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Young's modulus as a function of temperature.
    subblocks:
  - name: /Materials/ThermalMOX
    description: !!str
    type: 
    parameters:
    - name: Pu_content
      required: No
      default: !!str 0.07
      cpp_type: double
      group_name: 
      description: |
        Weight fraction of Pu in MOX fuel
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup Rate
    - name: initial_porosity
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The initial porosity
    - name: model
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        Used Model: 0: Duriez or  1: Amaya
    - name: oxy_to_metal_ratio
      required: No
      default: !!str 2
      cpp_type: double
      group_name: 
      description: |
        Deviation from stoechiometry
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str ThermalMOX
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/ThermalUO2
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup Rate
    - name: initial_porosity
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The initial porosity
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str ThermalUO2
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/ThermalUO2Meso
    description: !!str
    type: 
    parameters:
    - name: Lucuta_and_meso
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        Use mesoscale model and lucuta model
    - name: Rk0
      required: No
      default: !!str 1.13e-09
      cpp_type: double
      group_name: 
      description: |
        GB thermal resistance, defaults to value for Sym. Tilt GB in UO2 from LANL MD.
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: bubble_radius
      required: No
      default: !!str 5e-07
      cpp_type: double
      group_name: 
      description: |
        fuel Grain radius in m
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup Rate
    - name: d_GB
      required: No
      default: !!str 1.95e-09
      cpp_type: double
      group_name: 
      description: |
        GB characteristic length in m, defaults to value for Rk0 = 1.13e-9 m^2 K/W
    - name: grain_radius
      required: No
      default: !!str 1e-05
      cpp_type: double
      group_name: 
      description: |
        fuel Grain radius in m
    - name: initial_porosity
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The initial porosity
    - name: k_bub
      required: No
      default: !!str 0.00565
      cpp_type: double
      group_name: 
      description: |
        Thermal conductivity within the bubbles.  Defaults to thermal conductivity of Xe.
    - name: no_irrad
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        No irradiation effects on thermal conductivity
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str ThermalUO2Meso
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/ThermalZry
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str ThermalZry
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/UO2
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: oxygen
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Oxygen
    - name: t_ref
      required: No
      default: !!str 300
      cpp_type: double
      group_name: 
      description: |
        
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: type
      required: No
      default: !!str UO2
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Materials/VSwellingUO2
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The id or name of the block (subdomain) that this material represents.
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The id or name of the boundary that this material represents.
    - name: burnup
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Burnup
    - name: complete_burnup
      required: No
      default: !!str 5
      cpp_type: double
      group_name: 
      description: |
        The burnup at which densification is complete input in units of MWd/kgU
    - name: density
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Initial fuel density
    - name: temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled Temperature
    - name: total_densification
      required: No
      default: !!str 0.01
      cpp_type: double
      group_name: 
      description: |
        The densification that will occur given as a fraction of theoretical density
    - name: type
      required: No
      default: !!str VSwellingUO2
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
- name: /Mesh
  description: !!str
  type: 
  parameters:
  - name: displacements
    required: No
    default: !!str 
    cpp_type: std::vector<std::string, std::allocator<std::string> >
    group_name: 
    description: |
      The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.
  - name: uniform_refine
    required: No
    default: !!str 0
    cpp_type: unsigned int
    group_name: 
    description: |
      Specify the level of uniform refinement applied to the initial mesh
  - name: ghosted_boundaries
    required: No
    default: !!str 
    cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
    group_name: Advanced
    description: |
      Boundaries to be ghosted if using Nemesis
  - name: ghosted_boundaries_inflation
    required: No
    default: !!str 
    cpp_type: std::vector<double, std::allocator<double> >
    group_name: Advanced
    description: |
      If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'
  - name: patch_size
    required: No
    default: !!str 40
    cpp_type: unsigned int
    group_name: Advanced
    description: |
      The number of nodes to consider in the NearestNode neighborhood.
  - name: skip_partitioning
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Partitioning
    description: |
      If true the mesh won't be partitioned.  Probably not a good idea to use it with a serial mesh!
  - name: type
    required: Yes
    default: !!str MooseMesh
    cpp_type: std::string
    group_name: 
    description: |
      A string representing the Moose Object that will be built by this Action
  - name: block_id
    required: No
    default: !!str 
    cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >
    group_name: Add Names
    description: |
      IDs of the block id/name pairs
  - name: block_name
    required: No
    default: !!str 
    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
    group_name: Add Names
    description: |
      Names of the block id/name pairs (must correspond with "block_id"
  - name: boundary_id
    required: No
    default: !!str 
    cpp_type: std::vector<short, std::allocator<short> >
    group_name: Add Names
    description: |
      IDs of the boundary id/name pairs
  - name: boundary_name
    required: No
    default: !!str 
    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
    group_name: Add Names
    description: |
      Names of the boundary id/name pairs (must correspond with "boundary_id"
  - name: centroid_partitioner_direction
    required: No
    default: !!str 
    cpp_type: MooseEnum
    group_name: Partitioning
    options: x y z radial
    description: |
      Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial
  - name: construct_side_list_from_node_list
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Advanced
    description: |
      If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset
  - name: partitioner
    required: No
    default: !!str 
    cpp_type: MooseEnum
    group_name: Partitioning
    options: linear centroid
    description: |
      Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.
  - name: second_order
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Advanced
    description: |
      Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.
  subblocks:
  - name: /Mesh/<type>
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /Mesh/<type>/GeneratedMesh
      description: !!str
      type: 
      parameters:
      - name: dim
        required: Yes
        default: !!str 
        cpp_type: MooseEnum
        group_name: Main
        options: 1 2 3
        description: |
          The dimension of the mesh to be generated
      - name: elem_type
        required: No
        default: !!str 
        cpp_type: MooseEnum
        group_name: 
        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10
        description: |
          The type of element from libMesh to generate (default: linear element for requested dimension)
      - name: file
        required: No
        default: !!str 
        cpp_type: MeshFileName
        group_name: 
        description: |
          The name of the mesh file to read (required unless using dynamic generation)
      - name: nemesis
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.
      - name: nx
        required: No
        default: !!str 1
        cpp_type: int
        group_name: 
        description: |
          Number of elements in the X direction
      - name: ny
        required: No
        default: !!str 1
        cpp_type: int
        group_name: 
        description: |
          Number of elements in the Y direction
      - name: nz
        required: No
        default: !!str 1
        cpp_type: int
        group_name: 
        description: |
          Number of elements in the Z direction
      - name: type
        required: No
        default: !!str GeneratedMesh
        cpp_type: std::string
        group_name: 
        description: |
          
      - name: xmax
        required: No
        default: !!str 1
        cpp_type: double
        group_name: 
        description: |
          Upper X Coordinate of the generated mesh
      - name: xmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          Lower X Coordinate of the generated mesh
      - name: ymax
        required: No
        default: !!str 1
        cpp_type: double
        group_name: 
        description: |
          Upper Y Coordinate of the generated mesh
      - name: ymin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          Lower Y Coordinate of the generated mesh
      - name: zmax
        required: No
        default: !!str 1
        cpp_type: double
        group_name: 
        description: |
          Upper Z Coordinate of the generated mesh
      - name: zmin
        required: No
        default: !!str 0
        cpp_type: double
        group_name: 
        description: |
          Lower Z Coordinate of the generated mesh
      subblocks:
    - name: /Mesh/<type>/MeshExtruder
      description: !!str
      type: 
      parameters:
      - name: bottom_sidesets
        required: No
        default: !!str 
        cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
        group_name: 
        description: |
          A list of boundaries that will be applied to the bottom of the extruded mesh
      - name: dim
        required: No
        default: !!str 3
        cpp_type: MooseEnum
        group_name: Advanced
        options: 1 2 3
        description: |
          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!
      - name: extrusion_axis
        required: Yes
        default: !!str 
        cpp_type: unsigned int
        group_name: 
        description: |
          The axis that the mesh will be extruded upon
      - name: file
        required: No
        default: !!str 
        cpp_type: MeshFileName
        group_name: 
        description: |
          The name of the mesh file to read (required unless using dynamic generation)
      - name: height
        required: Yes
        default: !!str 
        cpp_type: double
        group_name: 
        description: |
          The height of the Mesh
      - name: nemesis
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.
      - name: num_layers
        required: Yes
        default: !!str 
        cpp_type: unsigned int
        group_name: 
        description: |
          The number of layers in the extruded mesh
      - name: top_sidesets
        required: No
        default: !!str 
        cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
        group_name: 
        description: |
          A list of boundaries that will be applied to the top of the extruded mesh
      - name: type
        required: No
        default: !!str MeshExtruder
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
    - name: /Mesh/<type>/MooseMesh
      description: !!str
      type: 
      parameters:
      - name: dim
        required: No
        default: !!str 3
        cpp_type: MooseEnum
        group_name: Advanced
        options: 1 2 3
        description: |
          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!
      - name: file
        required: No
        default: !!str 
        cpp_type: MeshFileName
        group_name: 
        description: |
          The name of the mesh file to read (required unless using dynamic generation)
      - name: nemesis
        required: No
        default: !!str 0
        cpp_type: bool
        group_name: Advanced
        description: |
          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.
      - name: type
        required: No
        default: !!str MooseMesh
        cpp_type: std::string
        group_name: 
        description: |
          
      subblocks:
  - name: /Mesh/ExtraNodesets
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /Mesh/ExtraNodesets/*
      description: !!str
      type: 
      parameters:
      - name: coord
        required: No
        default: !!str 
        cpp_type: std::vector<double, std::allocator<double> >
        group_name: 
        description: |
          The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).
      - name: id
        required: Yes
        default: !!str 
        cpp_type: unsigned int
        group_name: 
        description: |
          The nodeset number you want to use.
      - name: nodes
        required: No
        default: !!str 
        cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >
        group_name: 
        description: |
          The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).
      - name: tolerance
        required: No
        default: !!str 1e-06
        cpp_type: double
        group_name: 
        description: |
          The tolerance in which two nodes are considered identical
      subblocks:
  - name: /Mesh/Modifier
    description: !!str
    type: 
    parameters:
    subblocks:
    - name: /Mesh/Modifier/*
      description: !!str
      type: 
      parameters:
      - name: type
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          A string representing the Moose Object that will be built by this Action
      subblocks:
- name: /Output
  description: !!str
  type: 
  parameters:
  - name: elemental_as_nodal
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Advanced
    description: |
      Output elemental variables also as nodal
  - name: exodus
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: 
    description: |
      Specifies that you would like Exodus output solution file(s)
  - name: exodus_inputfile_output
    required: No
    default: !!str 1
    cpp_type: bool
    group_name: Advanced
    description: |
      Determines whether or not the input file is output to exodus - default (true)
  - name: file_base
    required: No
    default: !!str 
    cpp_type: OutFileBase
    group_name: 
    description: |
      The desired solution output name without an extension (Defaults to the mesh file name + '_out' or 'out' if generating the mesh by some other means)
  - name: gmv
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Format
    description: |
      Specifies that you would like GMV output solution file(s)
  - name: gnuplot_format
    required: No
    default: !!str ps
    cpp_type: std::string
    group_name: Postprocessor
    description: |
      Specifies which output format gnuplot will produce. Currently supported: ps, gif, and png
  - name: interval
    required: No
    default: !!str 1
    cpp_type: unsigned int
    group_name: Advanced
    description: |
      The interval at which timesteps are output to the solution file
  - name: iteration_plot_start_time
    required: No
    default: !!str 1.79769e+308
    cpp_type: double
    group_name: Advanced
    description: |
      Specifies a time after which the solution will be written following each nonlinear iteration
  - name: max_pps_rows_screen
    required: No
    default: !!str 15
    cpp_type: unsigned int
    group_name: Postprocessor
    description: |
      The maximum number of postprocessor values displayed on screen during a timestep (set to 0 for unlimited)
  - name: nemesis
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Format
    description: |
      Specifies that you would like Nemesis output solution file(s)
  - name: num_restart_files
    required: No
    default: !!str 0
    cpp_type: unsigned int
    group_name: Restart
    description: |
      Number of the restart files to save (0 = no restart files)
  - name: output_displaced
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Advanced
    description: |
      Requests that displaced mesh files are written at each solve
  - name: output_es_info
    required: No
    default: !!str 1
    cpp_type: bool
    group_name: Advanced
    description: |
      Requests that we output Equation Systems info during calls to initialSetup (normallly at the beginning of a simulation.)
  - name: output_initial
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: 
    description: |
      Requests that the initial condition is output to the solution file
  - name: output_solution_history
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Advanced
    description: |
      Requests that the 'solution history' is output, the solution history is the number of nonlinear / linear solves that are done for each step.
  - name: output_variables
    required: No
    default: !!str 
    cpp_type: std::vector<std::string, std::allocator<std::string> >
    group_name: 
    description: |
      A list of the variables that should be in the Exodus output file.  If this is not provided then all variables will be in the output.
  - name: perf_log
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Logging
    description: |
      Specifies whether or not the Performance log should be printed
  - name: postprocessor_csv
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Postprocessor
    description: |
      Specifies that you would like a PostProcessor comma separated values file
  - name: postprocessor_gnuplot
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Postprocessor
    description: |
      Specifies that you would like plots of the postprocessor output
  - name: postprocessor_screen
    required: No
    default: !!str 1
    cpp_type: bool
    group_name: Postprocessor
    description: |
      Specifies that you would like PostProcessor output to the screen (stdout)
  - name: print_linear_residuals
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Advanced
    description: |
      Specifies whether the linear residuals are printed during the solve
  - name: screen_interval
    required: No
    default: !!str 1
    cpp_type: unsigned int
    group_name: Postprocessor
    description: |
      The interval at which postprocessors are output to the screen. This value must evenly divide "interval" so that postprocessors are calculated at corresponding solution timesteps. In addition, if "screen_interval" is strictly greater than "interval", "output_initial" must be set to true
  - name: show_setup_log_early
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Logging
    description: |
      Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled in perf_log is false
  - name: tecplot
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Format
    description: |
      Specifies that you would like Tecplot output solution files(s)
  - name: tecplot_binary
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Format
    description: |
      Specifies that you would like Tecplot binary output solution files(s)
  - name: xda
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: Format
    description: |
      Specifies that you would like xda output solution files(s)
  subblocks:
  - name: /Output/OverSampling
    description: !!str
    type: 
    parameters:
    - name: exodus
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Specifies that you would like Exodus output solution file(s)
    - name: file_base
      required: No
      default: !!str 
      cpp_type: OutFileBase
      group_name: 
      description: |
        The desired oversampled solution output name without an extension.  If not supplied, the main file_base will be used with a '_oversample' suffix added.
    - name: gmv
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Specifies that you would like GMV output solution file(s)
    - name: interval
      required: No
      default: !!str 1
      cpp_type: int
      group_name: 
      description: |
        The iterval at which timesteps are output to the solution file
    - name: iteration_plot_start_time
      required: No
      default: !!str 1.79769e+308
      cpp_type: double
      group_name: 
      description: |
        Specifies a time after which the solution will be written following each nonlinear iteration
    - name: nemesis
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Specifies that you would like Nemesis output solution file(s)
    - name: output_initial
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Requests that the initial condition is output to the solution file
    - name: output_variables
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        A list of the variables that should be in the Exodus output file.  If this is not provided then all variables will be in the output.
    - name: refinements
      required: No
      default: !!str 1
      cpp_type: unsigned int
      group_name: 
      description: |
        The number of refinements to output for the over sampled solution
    - name: tecplot
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Specifies that you would like Tecplot output solution files(s)
    - name: tecplot_binary
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Specifies that you would like Tecplot binary output solution files(s)
    - name: xda
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Specifies that you would like xda output solution files(s)
    subblocks:
- name: /PlenumTemperature
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /PlenumTemperature/*
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str residual
      cpp_type: std::string
      group_name: 
      description: |
        Set to (residual|timestep|timestep_begin) to execute only at that moment
    - name: inner_radius_surfaces
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The fuel surfaces along the inner radius
    - name: inner_surfaces
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The inner surfaces (e.g. fuel not on inner radius)
    - name: num_pellets
      required: No
      default: !!str 0
      cpp_type: unsigned int
      group_name: 
      description: |
        Number of discrete pellets in the model
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FORTH
      description: |
        Specifies the order of the FE shape function to use for this variable
    - name: outer_surfaces
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The outer surfaces (e.g. cladding)
    - name: point1
      required: No
      default: !!str 0 0 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point one for defining an axis
    - name: point2
      required: No
      default: !!str 0 1 0 
      cpp_type: std::vector<double, std::allocator<double> >
      group_name: 
      description: |
        Point two for defining an axis
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: temp
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The temperature variable name
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    - name: family
      required: No
      default: !!str LAGRANGE
      cpp_type: std::string
      group_name: 
      description: |
        Specifies the family of FE shape functions to use for this variable
    - name: boundary
      required: No
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The boundary ID or name over which the plenum temperature should be measured
    - name: use_displaced_mesh
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        
    subblocks:
- name: /Postprocessors
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Postprocessors/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Postprocessors/AverageElementSize
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str AverageElementSize
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/AverageFissionRate
    description: !!str
    type: 
    parameters:
    - name: area
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Cross sectional area
    - name: energy_per_fission
      required: No
      default: !!str 3.28451e-11
      cpp_type: double
      group_name: 
      description: |
        Energy released per fission (J/fission)
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fuel_inner_radius
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        The inner radius
    - name: fuel_outer_radius
      required: No
      default: !!str 0.0041
      cpp_type: double
      group_name: 
      description: |
        The outer radius
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: rod_ave_lin_pow
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The power function
    - name: type
      required: No
      default: !!str AverageFissionRate
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/AverageNodalVariableValue
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: boundary
      required: No
      default: !!str ANY_BOUNDARY_ID 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        boundary ID or name where the postprocessor works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str AverageNodalVariableValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this postprocessor operates on
    subblocks:
  - name: /Postprocessors/CarbonMonoxideProduction
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: time_int_surf_temp
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the postprocessor containing the time integrateged surface temperature
    - name: total_fissions
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the postprocessor contining the total fissions
    - name: type
      required: No
      default: !!str CarbonMonoxideProduction
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/DeCARTIntegralPower
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str DeCARTIntegralPower
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/DeCARTPowerRatio
    description: !!str
    type: 
    parameters:
    - name: DeCARTpowerpostprocessor
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the DeCART power post processor
    - name: Elementpowerpostprocessor
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the FEM based power post processor
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str DeCARTPowerRatio
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/DeCARTRegionTemperature
    description: !!str
    type: 
    parameters:
    - name: Azimuthal_Angle_Number
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The angular number division id, starting from 0 going to 2 pi 
    - name: Bottom_Region_Axial
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The bottom region boundary
    - name: Inner_Region_Radius
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The inner radi for the region
    - name: Outer_Region_Radius
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The outer radi for the region
    - name: Top_Region_Axial
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The top region boundary
    - name: Total_Number_Angular_Divisions
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The total number of angular divisions
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: dim
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        The dimension of the region either 2 or 3 (D)
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: near
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        a smallness parameter to determine an acceptable level of epislon for distance comparison
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: planeid
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
        a unique DeCART region id for the axial plane
    - name: regionid
      required: Yes
      default: !!str 
      cpp_type: int
      group_name: 
      description: |
         a unique DeCART region id in the radial plane
    - name: type
      required: No
      default: !!str DeCARTRegionTemperature
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementAverageValue
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementAverageValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementH1Error
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The analytic solution to compare against
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementH1Error
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementH1SemiError
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The analytic solution to compare against
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementH1SemiError
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegral
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegral
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralFisGasBoundarySifgr
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralFisGasBoundarySifgr
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralFisGasGeneratedSifgr
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralFisGasGeneratedSifgr
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralFisGasGrainSifgr
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralFisGasGrainSifgr
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralFisGasProduce
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralFisGasProduce
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralFisGasRelease
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralFisGasRelease
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralFisGasReleasedSifgr
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralFisGasReleasedSifgr
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralMaterialProperty
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: mat_prop
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the material property
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralMaterialProperty
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementIntegralPower
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: energy_per_fission
      required: No
      default: !!str 3.28451e-11
      cpp_type: double
      group_name: 
      description: |
        Energy released per fission (J/fission)
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: fission_rate
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        Coupled fission rate
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementIntegralPower
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementL2Error
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The analytic solution to compare against
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementL2Error
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementL2Norm
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementL2Norm
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/ElementalVariableValue
    description: !!str
    type: 
    parameters:
    - name: elementid
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The ID of the element where we monitor
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ElementalVariableValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The variable to be monitored
    subblocks:
  - name: /Postprocessors/EmptyPostprocessor
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str EmptyPostprocessor
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/HeatFluxIntegral
    description: !!str
    type: 
    parameters:
    - name: axial_length
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        The axial length to which the integral will be performed
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: thermal_conductivity
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the thermal conductivity material property that will be used 
    - name: type
      required: No
      default: !!str HeatFluxIntegral
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/HomogenizedElasticConstants
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: column
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)
    - name: dx_xx
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in xx
    - name: dx_xy
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in xy
    - name: dx_yy
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in yy
    - name: dx_yz
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in yz
    - name: dx_zx
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in zx
    - name: dx_zz
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in zz
    - name: dy_xx
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in xx
    - name: dy_xy
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in xy
    - name: dy_yy
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in yy
    - name: dy_yz
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in yz
    - name: dy_zx
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in zx
    - name: dy_zz
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in zz
    - name: dz_xx
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in xx
    - name: dz_xy
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in xy
    - name: dz_yy
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in yy
    - name: dz_yz
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in yz
    - name: dz_zx
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in zx
    - name: dz_zz
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in zz
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: row
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction the variable this kernel acts in. (0 for xx, 1 for yy, 2 for zz, 3 for xy, 4 for yz, 5 for zx)
    - name: type
      required: No
      default: !!str HomogenizedElasticConstants
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/HomogenizedThermalConductivity
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: component
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        An integer corresponding to the direction this pp acts in (0 for x, 1 for y, 2 for z)
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: temp_x
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in x
    - name: temp_y
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in y
    - name: temp_z
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        solution in z
    - name: type
      required: No
      default: !!str HomogenizedThermalConductivity
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/InternalVolume
    description: !!str
    type: 
    parameters:
    - name: addition
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        An additional volume to be included in the internal volume calculation
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: component
      required: No
      default: !!str 1
      cpp_type: unsigned int
      group_name: 
      description: |
        The component to use in the integration
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: scale_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        A scale factor to be applied to the internal volume calculation
    - name: type
      required: No
      default: !!str InternalVolume
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/Mass
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str Mass
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /Postprocessors/NodalL2Norm
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: boundary
      required: No
      default: !!str ANY_BOUNDARY_ID 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        boundary ID or name where the postprocessor works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str NodalL2Norm
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this postprocessor operates on
    subblocks:
  - name: /Postprocessors/NodalMaxValue
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: boundary
      required: No
      default: !!str ANY_BOUNDARY_ID 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        boundary ID or name where the postprocessor works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str NodalMaxValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this postprocessor operates on
    subblocks:
  - name: /Postprocessors/NodalProxyMaxValue
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: boundary
      required: No
      default: !!str ANY_BOUNDARY_ID 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        boundary ID or name where the postprocessor works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str NodalProxyMaxValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this postprocessor operates on
    subblocks:
  - name: /Postprocessors/NodalSum
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: boundary
      required: No
      default: !!str ANY_BOUNDARY_ID 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        boundary ID or name where the postprocessor works
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str NodalSum
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this postprocessor operates on
    subblocks:
  - name: /Postprocessors/NodalVariableValue
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: nodeid
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The ID of the node where we monitor
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str NodalVariableValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The variable to be monitored
    subblocks:
  - name: /Postprocessors/PlenumTemperature
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: distance
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The distance variable name
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: gap_temp
      required: No
      default: !!str 
      cpp_type: std::vector<VariableName>
      group_name: 
      description: |
        The gap temperature variable name
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PlenumTemperature
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/PlotFunction
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        Name of the function to plot (i.e. sample)
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: point
      required: No
      default: !!str 
      cpp_type: libMesh::Point
      group_name: 
      description: |
        A point in space to be given to the function
    - name: scale_factor
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        A scale factor to be applied to the function
    - name: type
      required: No
      default: !!str PlotFunction
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintDOFs
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintDOFs
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintDT
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintDT
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintElapsedTime
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintElapsedTime
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintNumElems
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintNumElems
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintNumLinearIters
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintNumLinearIters
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintNumNodes
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintNumNodes
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintNumNonlinearIters
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintNumNonlinearIters
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintResidual
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintResidual
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/PrintScalarVariable
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: idx
      required: No
      default: !!str 0
      cpp_type: unsigned int
      group_name: 
      description: |
        Index for this variable
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str PrintScalarVariable
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        Name of the variable
    subblocks:
  - name: /Postprocessors/Reporter
    description: !!str
    type: 
    parameters:
    - name: default
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Default value
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str Reporter
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Postprocessors/ScalarL2Error
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: function
      required: Yes
      default: !!str 
      cpp_type: FunctionName
      group_name: 
      description: |
        The analytic solution to compare against
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ScalarL2Error
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: VariableName
      group_name: 
      description: |
        The name of the scalar variable
    subblocks:
  - name: /Postprocessors/SideAverageValue
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str SideAverageValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/SideFluxIntegral
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: diffusivity
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the diffusivity material property that will be used in the flux computation.
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str SideFluxIntegral
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/SideIntegral
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str SideIntegral
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/SideIntegralMassFlux
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str SideIntegralMassFlux
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/ThermalCond
    description: !!str
    type: 
    parameters:
    - name: T_hot
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Temperature on 'hot' boundary in K
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: dx
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Length between sides of sample in length_scale
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: flux
      required: Yes
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Heat flux out of 'cold' boundary in solution units, should always be positive
    - name: length_scale
      required: No
      default: !!str 1e-08
      cpp_type: double
      group_name: 
      description: |
        lengthscale of the solution, default is 1e-8
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str ThermalCond
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
  - name: /Postprocessors/TotalVariableValue
    description: !!str
    type: 
    parameters:
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str TotalVariableValue
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: value
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        The name of the postprocessor
    subblocks:
- name: /Preconditioning
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Preconditioning/*
    description: !!str
    type: 
    parameters:
    - name: petsc_options
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        Singleton Petsc options
    - name: petsc_options_iname
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        Names of Petsc name/value pairs
    - name: petsc_options_value
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        Values of Petsc name/value pairs (must correspond with "petsc_options_iname"
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /Preconditioning/FDP
    description: !!str
    type: 
    parameters:
    - name: full
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.
    - name: implicit_geometric_coupling
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.
    - name: off_diag_column
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.
    - name: off_diag_row
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.
    - name: type
      required: No
      default: !!str FDP
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Preconditioning/PBP
    description: !!str
    type: 
    parameters:
    - name: off_diag_column
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.
    - name: off_diag_row
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.
    - name: preconditioner
      required: Yes
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        TODO: docstring
    - name: solve_order
      required: Yes
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).
    - name: type
      required: No
      default: !!str PBP
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
  - name: /Preconditioning/SMP
    description: !!str
    type: 
    parameters:
    - name: full
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.
    - name: off_diag_column
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.
    - name: off_diag_row
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.
    - name: type
      required: No
      default: !!str SMP
      cpp_type: std::string
      group_name: 
      description: |
        
    subblocks:
- name: /Problem
  description: !!str
  type: 
  parameters:
  - name: block
    required: No
    default: !!str 
    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
    group_name: 
    description: |
      Block IDs for the coordinate systems
  - name: coord_type
    required: No
    default: !!str 
    cpp_type: std::vector<std::string, std::allocator<std::string> >
    group_name: 
    description: |
      Type of the coordinate system per block param
  - name: fe_cache
    required: No
    default: !!str 0
    cpp_type: bool
    group_name: 
    description: |
      Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.
  - name: name
    required: No
    default: !!str MOOSE Problem
    cpp_type: std::string
    group_name: 
    description: |
      The name the problem
  - name: type
    required: Yes
    default: !!str FEProblem
    cpp_type: std::string
    group_name: 
    description: |
      Type of the problem to build
  subblocks:
- name: /ScalarKernels
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /ScalarKernels/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /ScalarKernels/ODETimeDerivative
    description: !!str
    type: 
    parameters:
    - name: type
      required: No
      default: !!str ODETimeDerivative
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The name of the variable that this kernel operates on
    subblocks:
- name: /SolidMechanics
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /SolidMechanics/*
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The list of ids of the blocks (subdomain) that these kernels will be applied to
    - name: diag_save_in_disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the r displacement diagonal preconditioner terms.
    - name: diag_save_in_disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the x displacement diagonal preconditioner terms.
    - name: diag_save_in_disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the y displacement diagonal preconditioner terms.
    - name: diag_save_in_disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the z displacement diagonal preconditioner terms.
    - name: disp_r
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The r displacement
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The z displacement
    - name: save_in_disp_r
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the r displacement residuals.
    - name: save_in_disp_x
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the x displacement residuals.
    - name: save_in_disp_y
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the y displacement residuals.
    - name: save_in_disp_z
      required: No
      default: !!str 
      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >
      group_name: 
      description: |
        Auxiliary variables to save the z displacement residuals.
    - name: temp
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The temperature
    - name: use_displaced_mesh
      required: No
      default: !!str 1
      cpp_type: bool
      group_name: 
      description: |
        
    subblocks:
- name: /ThermalContact
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /ThermalContact/*
    description: !!str
    type: 
    parameters:
    - name: appended_property_name
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        Name appended to material properties to make them unique
    - name: disp_x
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The x displacement
    - name: disp_y
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The y displacement
    - name: disp_z
      required: No
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The z displacement
    - name: gap_conductivity
      required: No
      default: !!str 1
      cpp_type: double
      group_name: 
      description: |
        The thermal conductivity of the gap material
    - name: gap_type
      required: No
      default: !!str GapValueAux
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose object that will be used for computing the gap size
    - name: master
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The master surface
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        The finite element order
    - name: quadrature
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether or not to use quadrature point based gap heat transfer
    - name: save_in
      required: No
      default: !!str 
      cpp_type: std::vector<std::string, std::allocator<std::string> >
      group_name: 
      description: |
        The Auxiliary Variable to (optionally) save the boundary flux in
    - name: slave
      required: Yes
      default: !!str 
      cpp_type: BoundaryName
      group_name: 
      description: |
        The slave surface
    - name: tangential_tolerance
      required: No
      default: !!str 
      cpp_type: double
      group_name: 
      description: |
        Tangential distance to extend edges of contact surfaces
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose object that will be used for heat conduction over the gap
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: NonlinearVariableName
      group_name: 
      description: |
        The variable for thermal contact
    - name: warnings
      required: No
      default: !!str 0
      cpp_type: bool
      group_name: 
      description: |
        Whether to output warning messages concerning nodes not being found
    subblocks:
- name: /UserObjects
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /UserObjects/*
    description: !!str
    type: 
    parameters:
    - name: type
      required: Yes
      default: !!str 
      cpp_type: std::string
      group_name: 
      description: |
        A string representing the Moose Object that will be built by this Action
    subblocks:
  - name: /UserObjects/LayeredIntegral
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str ANY_BLOCK_ID 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        block ID or name where the object works
    - name: direction
      required: Yes
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: x y z
      description: |
        The direction of the layers.
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: num_layers
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The number of layers.
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str LayeredIntegral
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this object operates on
    subblocks:
  - name: /UserObjects/LayeredSideIntegral
    description: !!str
    type: 
    parameters:
    - name: boundary
      required: Yes
      default: !!str 
      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >
      group_name: 
      description: |
        The list of boundary IDs or names from the mesh where this boundary condition applies
    - name: direction
      required: Yes
      default: !!str 
      cpp_type: MooseEnum
      group_name: 
      options: x y z
      description: |
        The direction of the layers.
    - name: execute_on
      required: No
      default: !!str timestep
      cpp_type: MooseEnum
      group_name: 
      options: initial residual jacobian timestep timestep_begin custom
      description: |
        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment
    - name: num_layers
      required: Yes
      default: !!str 
      cpp_type: unsigned int
      group_name: 
      description: |
        The number of layers.
    - name: output
      required: No
      default: !!str auto
      cpp_type: MooseEnum
      group_name: Advanced
      options: none auto screen file both
      description: |
        The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)
    - name: type
      required: No
      default: !!str LayeredSideIntegral
      cpp_type: std::string
      group_name: 
      description: |
        
    - name: variable
      required: Yes
      default: !!str 
      cpp_type: std::vector<VariableName, std::allocator<VariableName> >
      group_name: 
      description: |
        The name of the variable that this boundary condition applies to
    subblocks:
- name: /Variables
  description: !!str
  type: 
  parameters:
  subblocks:
  - name: /Variables/*
    description: !!str
    type: 
    parameters:
    - name: block
      required: No
      default: !!str 
      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
      group_name: 
      description: |
        The block id where this variable lives
    - name: family
      required: No
      default: !!str LAGRANGE
      cpp_type: MooseEnum
      group_name: 
      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN
      description: |
        Specifies the family of FE shape functions to use for this variable
    - name: initial_condition
      required: No
      default: !!str 0
      cpp_type: double
      group_name: 
      description: |
        Specifies the initial condition for this variable
    - name: order
      required: No
      default: !!str FIRST
      cpp_type: MooseEnum
      group_name: 
      options: CONSTANT FIRST SECOND THIRD FOURTH
      description: |
        Specifies the order of the FE shape function to use for this variable
    - name: scaling
      required: No
      default: !!str 1
      cpp_type: double
      group_name: Advanced
      description: |
        Specifies a scaling factor to apply to this variable
    - name: initial_from_file_timestep
      required: No
      default: !!str 2
      cpp_type: int
      group_name: Initial From File
      description: |
        Gives the timestep for which to read a solution from a file for a given variable
    - name: initial_from_file_var
      required: No
      default: !!str 
      cpp_type: std::string
      group_name: Initial From File
      description: |
        Gives the name of a variable for which to read an initial condition from a mesh file
    subblocks:
    - name: /Variables/*/InitialCondition
      description: !!str
      type: 
      parameters:
      - name: type
        required: Yes
        default: !!str 
        cpp_type: std::string
        group_name: 
        description: |
          A string representing the Moose Object that will be built by this Action
      subblocks:
      - name: /Variables/*/InitialCondition/<type>
        description: !!str
        type: 
        parameters:
        subblocks:
        - name: /Variables/*/InitialCondition/<type>/BoundingBoxIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: inside
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The value of the variable inside the box
          - name: outside
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The value of the variable outside the box
          - name: type
            required: No
            default: !!str BoundingBoxIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          - name: x1
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The x coordinate of the lower left-hand corner of the box
          - name: x2
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The x coordinate of the upper right-hand corner of the box
          - name: y1
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The y coordinate of the lower left-hand corner of the box
          - name: y2
            required: Yes
            default: !!str 
            cpp_type: double
            group_name: 
            description: |
              The y coordinate of the upper right-hand corner of the box
          - name: z1
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The z coordinate of the lower left-hand corner of the box
          - name: z2
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              The z coordinate of the upper right-hand corner of the box
          subblocks:
        - name: /Variables/*/InitialCondition/<type>/ConstantIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: type
            required: No
            default: !!str ConstantIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: value
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          subblocks:
        - name: /Variables/*/InitialCondition/<type>/FunctionIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: function
            required: Yes
            default: !!str 
            cpp_type: FunctionName
            group_name: 
            description: |
              The initial condition function.
          - name: type
            required: No
            default: !!str FunctionIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          subblocks:
        - name: /Variables/*/InitialCondition/<type>/RandomIC
          description: !!str
          type: 
          parameters:
          - name: block
            required: No
            default: !!str 
            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >
            group_name: 
            description: |
              The list of ids or names of the blocks (subdomain) that this initial condition will be applied to
          - name: max
            required: No
            default: !!str 1
            cpp_type: double
            group_name: 
            description: |
              Upper bound of the randomly generated values
          - name: min
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              Lower bound of the randomly generated values
          - name: seed
            required: No
            default: !!str 0
            cpp_type: unsigned int
            group_name: 
            description: |
              Seed value for the random number generator
          - name: type
            required: No
            default: !!str RandomIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this InitialCondtion is supposed to provide values for.
          subblocks:
        - name: /Variables/*/InitialCondition/<type>/ScalarConstantIC
          description: !!str
          type: 
          parameters:
          - name: type
            required: No
            default: !!str ScalarConstantIC
            cpp_type: std::string
            group_name: 
            description: |
              
          - name: value
            required: No
            default: !!str 0
            cpp_type: double
            group_name: 
            description: |
              
          - name: variable
            required: No
            default: !!str 
            cpp_type: VariableName
            group_name: 
            description: |
              The variable this initial condition is supposed to provide values for.
          subblocks:
